<?xml version="1.0"?>
<!--
  * build.xml
  *
  *      Authors: Matt Jones
  *    Copyright: 2000 Regents of the University of California and the
  *               National Center for Ecological Analysis and Synthesis
  *  For Details: http://www.nceas.ucsb.edu/
  *    File Info: '$Id: build.xml,v 1.144 2009-06-02 16:38:05 tao Exp $'
  *
  *  Build file for the Ant cross-platform build system for metacat
  *  See http://jakarta.apache.org for details on Ant
  *
  * usage: ant [compile|jar|install|jdoc]
-->
<project name="morpho" default="install" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<!-- include basedir so that this ant project can be imported by other's -->
	<dirname property="morpho.basedir" file="${ant.file.morpho}"/>
   <target name="init" unless="init.called">
      <property name="name" value="morpho"/>
      <property name="Name" value="Morpho Data Management Client"/>
      <property name="release" value="2.0.0"/>
      <property name="keystore" value="myKeystore"/>
      <property name="storepass" value="your-pw-goes-here"/>
      <property name="muser" value="uid=jones,o=NCEAS,dc=ecoinformatics,dc=org"/>
      <property name="mpass" value="your-pw-goes-here"/>
      <property name="utilities-tag" value="trunk" />
    <!--<property name="utilities-tag" value="tags/UTILITIES_1_1_0" />-->

	  <property name="svn-utilitiesUrl"
            value="https://code.ecoinformatics.org/code/utilities/${utilities-tag}" />
      <property name="eml-module" value="eml" />
	   <property name="eml-svn-base-url" value="https://code.ecoinformatics.org/code/eml"/>
      <!-- the following two properties will be used to get newest eml doc-->
      <property name="eml-doc-tag" value="RELEASE_EML_2_1_1" />
      <property name="eml.doc.dir" value="${morpho.basedir}/docs/eml-2.1.1" />
	  <property name="eml-doc-svn-url" value="${eml-svn-base-url}/tags/${eml-doc-tag}"/>
      <!-- the following property will be used to get eml210 schemas -->
      <property name="eml-210-schema-tag" value="RELEASE_EML_2_1_0" />
	  <property name="eml-210-schema-svn-url" value="${eml-svn-base-url}/tags/${eml-210-schema-tag}"/>
   	
    <!-- the following property will be used to get eml210 schemas -->
    <property name="eml-211-schema-tag" value="RELEASE_EML_2_1_1" />
	<property name="eml-211-schema-svn-url" value="${eml-svn-base-url}/tags/${eml-211-schema-tag}"/>
   	
   	<!-- eml-style-tag only be used to get xsl files that are different from schema releases -->
	  <property name="eml-style-tag" value="tags/RELEASE_EML_UTILS_1_0_4" />
	  <property name="eml-style-svn-url" value="${eml-svn-base-url}/${eml-style-tag}"/>
      <property name="helpjar" value="morphohelp.jar" />
      <filter token="release" value="${release}"/>
      <filter token="muser" value="${muser}"/>
      <filter token="mpass" value="${mpass}"/>
       
      <filter token="server" value="http://knb.ecoinformatics.org"/>
      <filter token="docrooturl" value="/"/>

      <property name="itisdir" value="${morpho.basedir}/../itislib" />
      <property name="srcdir" value="${morpho.basedir}/src" />

      <property name="libdir" value="${morpho.basedir}/lib" />
      <property name="xsldir" value="${morpho.basedir}/xsl" />
      <property name="schemadir" value="${morpho.basedir}/xsd"/>
      <property name="docuserdir" value="${morpho.basedir}/docs/user" />
      <property name="jwsdir"
                value="/var/www/org.ecoinformatics.knb/software/dist/morpho" />
      <property name="testdir" value="${morpho.basedir}/tests" />
		<property name="styledir" value="${libdir}/style" />

      <property name="build.dir" value="${morpho.basedir}/build"/>
      <property name="build.src" value="${build.dir}/src"/>
      <property name="build.dest" value="${build.dir}/classes"/>
   	  <property name="build.lib" value="${build.dir}/lib"/>
      <property name="build.docs" value="${build.dir}/docs"/>
      <property name="build.samples" value="${build.dir}/samples"/>
      <property name="build.tests" value="${build.dir}/tests"/>
      <property name="build.data" value="${build.dir}/data"/>
      <property name="build.javadocs" value="${build.dir}/docs/api"/>
      <property name="build.xsl" value="${build.dir}/xsl"/>
      <property name="build.schema" value="${build.dir}/schema"/>
      <!-- don't modify this value-->
      <property name="java.help.doc.dir" value="${morpho.basedir}/morphohelp" />
      <property name="searchDB" value="${morpho.basedir}/JavaHelpSearch"/>
      <property name="help.system.file" value="morpho.hs"/>
      <property name="map.file" value="Map.jhm"/>
      <property name="help.toc" value="morphoTOC.xml"/>
      <property name="help.index" value="morphoIndex.xml"/>
   	
   		<!-- userguide in LaTex -->
    	<property name="userguide.basedir" value="${docuserdir}/latex"/>
		<property name="userguide.fileprefix" value="MorphoUserGuide"/>

      <property name="dist.dir" value="${morpho.basedir}/dist"/>
      <property name="morpho.dir" value="${dist.dir}/morpho-${release}"/>
      <property name="morpho.lib" value="${morpho.dir}/lib"/>
      <property name="morpho.xsl" value="${morpho.dir}/xsl"/>
      <property name="morpho.lib.catalog" value="${morpho.lib}/catalog"/>
      <property name="morpho.lib.frames" value="${morpho.lib}/frames"/>
      <property name="morpho.lib.sampledata" value="${morpho.lib}/sampledata"/>
      <property name="morpho.lib.style" value="${morpho.lib}/style"/>
      <property name="morpho.lib.HTTPClient" value="${morpho.lib}/HTTPClient"/>
      <property name="morpho.src" value="${morpho.dir}/src"/>
      <property name="morpho.docs" value="${morpho.dir}/docs"/>
      <property name="morpho.docs.dev" value="${morpho.docs}/dev"/>
      <property name="morpho.docs.user" value="${morpho.docs}/user"/>
      <property name="morpho.docs.licenses" value="${morpho.docs}/licenses"/>
      <property name="morpho.docs.dev.api" value="${morpho.docs.dev}/api"/>
   	
	<!-- override the morpho property for other builds -->
   	<property name="morpho.args" value=""/>
   	   	
      <!-- NOTE: location is machine specific - insert 'Launch4J' location on your machine! This
		   property will be used in buildwininstaller target. -->
      <property name="launch4j.dir" location="/Applications/launch4j" />
    <!-- NOTE: location is machine specific - insert LaTex bin path on your machine! This
		   property will be used in 'helppdf' target. -->
		<property name="latex.path" value="/usr/local/texlive/2009/bin/universal-darwin"/>   	

      <property name="izpackjar" 
		            value="${libdir}/standalone-compiler.jar"/>
      <property name="jcal"
   	                value="${libdir}/jcalendar-1.3.2.jar" />
      <property name="xml4j"
                value="${libdir}/xml4j.jar" />
      <property name="xerces"
                value="${libdir}/xercesImpl.jar" />
      <property name="apis"
                value="${libdir}/xml-apis.jar" />
      <property name="xalan"
                value="${libdir}/xalan.jar" />
      <property name="sym"
                value="${libdir}/sym.jar" />
      <property name="dtd"
                value="${libdir}/dtdparser111.jar" />
      <property name="dom"
                value="${libdir}/dom4j.jar" />
      <property name="morpho"
                value="${build.lib}/${name}.jar" />
      <property name="jlf"
                value="${libdir}/shippedIcons.jar" />
      <property name="itisjar"
                value="${libdir}/itislib.jar" />
      <property name="jsse"
                value="${libdir}/jsse.jar" />
      <property name="jcert"
                value="${libdir}/jcert.jar" />
      <property name="jhelp"
                value="${libdir}/jhall.jar" />
      <property name="jnet"
                value="${libdir}/jnet.jar" />
      <property name="help"
                value="${libdir}/morphohelp.jar" />
      <property name="httpclient"
                value="${libdir}/httpclient.jar" />
      <property name="lmap"
                value="${libdir}/liveMap.jar" />
      <property name="kunststoff"
                value="${libdir}/kunststoff.jar" />
      <property name="morpho-config"
                value="${build.lib}/${name}-config.jar" />
      <property name="utilities"
                value="${libdir}/utilities.jar" />
      <property name="index"
                value="${libdir}/jhindexer.jar"/>
      <property name="axis"
   	                value="${libdir}/axis/axis.jar"/>
      <property name="tar"
                        value="${libdir}/tar.jar"/>
      <property name="activation"
                        value="${libdir}/activation.jar"/>
	   <property name="PDF"
                        value="${libdir}/PDFRenderer.jar"/>
      <property name="cpath"
	      value="${libdir}/jsse.jar:${libdir}/jcert.jar:${libdir}/jnet.jar:${jcal}:${xerces}:${apis}:${kunststoff}:${xalan}:${xml4j}:${build.dest}:${sym}:${dtd}:${dom}:${jlf}:${itisjar}:${httpclient}:${lmap}:${morpho-config}:${jhelp}:${utilities}:${axis}:${tar}:${activation}:${PDF}"/>
      <property name="package.home" value="edu/ucsb/nceas" />
	   
      <condition property="utilities.required">
        <or>
          <not><available file="${utilities}" type="file"/></not>
        </or>
      </condition>
	   
      <condition property="eml210schema.needed">
        <or>
          <not><available file="${schemadir}/eml-2.1.0/eml.xsd" type="file"/></not>
        </or>
      </condition>
      <condition property="eml211schema.needed">
          <or>
            <not><available file="${schemadir}/eml-2.1.1/eml.xsd" type="file"/></not>
          </or>
        </condition>
   	
      <condition property="transformstylesheet.needed">
        <or>
          <not><available file="${xsldir}/eml201to210.xsl" type="file"/></not>
          <not><available file="${xsldir}/eml201to211.xsl" type="file"/></not>
          <not><available file="${xsldir}/eml210to211.xsl" type="file"/></not>
		  <not><available file="${xsldir}/eml2tonbii.xsl" type="file"/></not>
  		<!-- make sure the eml2 stylesheets are in place from EML project -->  
        <not><available file="${styledir}/eml2/eml.xsl" type="file"/></not>
        	
        </or>
      </condition>
   	
      <property name="nbii.jarname" value="nbii.jar" />

      <property name="wsdl.url.nbii" value="http://nbii-thesaurus.ornl.gov/ws/services/SKOSThesaurusService?wsdl" />

      <!-- for easier classpath management (so many axis jars!)-->
      <path id="base.classpath">
   			<fileset dir="${libdir}">
   				<include name="*.jar" />
   			</fileset>
   			<fileset dir="${libdir}/axis">
   				<include name="*.jar" />
   			</fileset>
   
       </path>
   	
   		<path id="classpath.runtime">
   			<fileset dir="${build.lib}">
   				<include name="*.jar" />
   			</fileset>
		</path>

		<taskdef resource="axis-tasks.properties" classpathref="base.classpath"/>
   		
   		<!-- set up the latex task -->
   		<taskdef name="latex" classname="de.dokutransdata.antlatex.LaTeX" classpathref="base.classpath" />
	   
		<!-- set up svn -->
        <property name="svnant.lib" value="${morpho.basedir}/lib" />
        <property name="svnant.jar" value="${svnant.lib}/svnant.jar" />
        <property name="svnClientAdapter.jar"
            value="${svnant.lib}/svnClientAdapter.jar" />
        <property name="svnjavahl.jar"
            value="${svnant.lib}/svnjavahl.jar" />
	   <!-- load the svn task -->
        <path id="svn-classpath">
            <pathelement location="${svnjavahl.jar}" />
            <pathelement location="${svnant.jar}" />
            <pathelement location="${svnClientAdapter.jar}" />
        </path>
        <taskdef resource="svntask.properties"
            classpathref="svn-classpath" />
   	
	<!-- If you drop the maven-ant-tasks in ~/.ant/lib, you don't need these two bits. -->
	<taskdef uri="antlib:org.apache.maven.artifact.ant"
       resource="org/apache/maven/artifact/ant/antlib.xml"
       classpathref="base.classpath" />

   	<!-- Resolve maven dependencies -->
	<artifact:pom id="morphoPom" file="pom.xml" />
	<artifact:dependencies filesetId="dependency.fileset" pomrefid="morphoPom" usescope="runtime"/>
	<artifact:dependencies pathId="dependency.classpath" pomrefid="morphoPom"/>
   	
    <property name="libdir.mvn" value="${libdir}/maven" />
   	
   	<!-- combine base and dependencies for the classpath -->
   	<path id="classpath">
   		<path refid="base.classpath" />	
   		<path refid="dependency.classpath" />	
	</path>
   	
    <property name="init.called" value="true" />

   </target>
	

	<target name="generateNBIIStubs" depends="prepare">
		<echo message=" Generating stubs for NBII from ${wsdl.url.nbii}" />
		<axis-wsdl2java verbose="true" output="${build.src}" 
			url="${wsdl.url.nbii}" />
	</target>
	
	<target name="compileNBII" depends="generateNBIIStubs">
		<javac destdir="${build.dir}" debug="on" classpathref="classpath" >
			<src path="${build.src}" />
			
		</javac>
	</target>
	
	<target name="jarNBII" depends="compileNBII">
		<jar jarfile="${build.dir}/${nbii.jarname}" basedir="${build.dir}" >
			<include name="org/w3/www/**/*.*"/>
		</jar>
		<copy file="${build.dir}/${nbii.jarname}" todir="${libdir}" overwrite="true" />
	</target>
	
   <target name="prepare" depends="init">
      <mkdir dir="${build.dir}"/>
      <mkdir dir="${build.src}"/>
      <mkdir dir="${build.dest}"/>
   	  <mkdir dir="${build.lib}"/>
      <mkdir dir="${build.javadocs}"/>

       <!--
      <copy todir="${build.src}" filtering="no">
        <fileset dir="${srcdir}">
          <exclude name="**/CVS*"/>
          <exclude name="**/.#*"/>
        </fileset>
      </copy>
       -->
   </target>
  
	<target name="resolveD1" depends="init" description="retrieve DataONE dependencies with maven">
		<echo>Moving Maven dependencies (${dependency.fileset}) to ${libdir.mvn} </echo>
		<!-- Clear out mvn dir -->
		<delete dir="${libdir.mvn}"></delete>
		<!-- Copy all dependencies to the correct location. -->
		<copy todir="${libdir.mvn}">
			<fileset refid="dependency.fileset" />
			<!-- This mapper strips off all leading directory information -->
			<mapper type="flatten" />
		</copy>
	</target>

   <target name="emldoc" depends="prepare">
     <!-- checkout eml moduel -->
     <echo>Check out eml doc from SVN</echo>
     <!--<cvs cvsRoot="${cvsroot}"
          package="${eml-module}"
          tag="${eml-tag}"
          dest="${build.docs}" />-->
	  <svn>
            <export srcUrl="${eml-doc-svn-url}"
                destPath="${build.docs}/${eml-module}" />
     </svn>
     <ant dir="${build.docs}/${eml-module}" target="docs" inheritAll="false"/>
     <mkdir dir="${java.help.doc.dir}" />
     <copy todir="${java.help.doc.dir}/eml" filtering="no">
        <fileset dir="${build.docs}/${eml-module}/${eml.doc.dir}">
          <include name="**/*.html" />
          <include name="**/*.png" />
          <include name="**/*.css" />
        </fileset>
     </copy>

   </target>
   <target name="transform" depends="prepare">
      <property name="input" value="${morpho.basedir}/tests/testfiles/eml201withadditionalMetacat.xml" />
     <property name="output" value="eml210" />
     <property name="stylesheetname" value="eml201to210.xsl" />
      <xslt in="${input}" out="${output}" style="${xsldir}/${stylesheetname}">
      <param name="filename" expression="${input}"/>
       <outputproperty name="method" value="xml"/>
      <outputproperty name="indent" value="yes"/>
    </xslt>
   </target>
	
   <target name="getstylesheets" depends="prepare" if="transformstylesheet.needed">
     <!-- checkout eml/eml201to210.xsl and eml2tonbii.xsl file -->
     <echo>Check out eml conversion xsl files and NBII style sheet from SVN</echo>
	 <mkdir dir="${build.xsl}/eml_${eml-style-tag}" />
	 <svn>
            <export srcUrl="${eml-style-svn-url}/style"
                destPath="${build.xsl}/eml_${eml-style-tag}/style" force="true" />
        </svn>
	   <mkdir dir="${build.xsl}/eml_${eml-style-tag}/lib" />
	   <svn>
            <export srcUrl="${eml-style-svn-url}/lib/eml2tonbii"
                destPath="${build.xsl}/eml_${eml-style-tag}/lib/eml2tonbii" force="true" />
        </svn>
	<copy file="${build.xsl}/eml_${eml-style-tag}/style/eml201to210.xsl" todir="${xsldir}" />
	<copy file="${build.xsl}/eml_${eml-style-tag}/style/eml201to211.xsl" todir="${xsldir}" />
	<copy file="${build.xsl}/eml_${eml-style-tag}/style/eml210to211.xsl" todir="${xsldir}" />
	<copy file="${build.xsl}/eml_${eml-style-tag}/lib/eml2tonbii/eml2tonbii.xsl" todir="${xsldir}" />
   	
	<antcall target="copyemlstylesheet" />

   </target>
	
	<target name="copyemlstylesheet">
		<!-- copy eml xslt files, except the settings file -->
		<echo>Copy eml xsl files from SVN checkout to the lib dir</echo>
		<copy todir="${styledir}/eml2">
			<fileset dir="${build.xsl}/eml_${eml-style-tag}/style/eml" excludes="eml-settings.xsl"/>
		</copy>
	</target>	

   <target name="geteml210" depends="prepare" if="eml210schema.needed">
     <!-- checkout eml moduel -->
     <echo>Check out EML 2.1.0 schema from SVN</echo>
	   <mkdir dir="${build.schema}"/>
	   <svn>
            <export srcUrl="${eml-210-schema-svn-url}"
                destPath="${build.schema}/eml_${eml-210-schema-tag}" />
        </svn>
     <mkdir dir="${schemadir}/eml-2.1.0" />
     <copy todir="${schemadir}/eml-2.1.0" filtering="yes">
       <fileset dir="${build.schema}/eml_${eml-210-schema-tag}">
         <include name="*.xsd"/>
       </fileset>
     </copy> 
   </target>
	
	<target name="geteml211" depends="prepare" if="eml211schema.needed">
	     <!-- checkout eml moduel -->
	     <echo>Check out EML 2.1.1 schema from SVN</echo>
		   <mkdir dir="${build.schema}"/>
		   <svn>
	            <export srcUrl="${eml-211-schema-svn-url}"
	                destPath="${build.schema}/eml_${eml-211-schema-tag}" />
	        </svn>
	     <mkdir dir="${schemadir}/eml-2.1.1" />
	     <copy todir="${schemadir}/eml-2.1.1" filtering="yes">
	       <fileset dir="${build.schema}/eml_${eml-211-schema-tag}">
	         <include name="*.xsd"/>
	       </fileset>
	     </copy> 
	   </target>


   <target name="utilities" depends="prepare" if="utilities.required">
     <!-- checkout utilities moduel -->
     <!--<echo>Enter CVS password for utilities module (${cvsroot}) : </echo>
     <cvs cvsRoot="${cvsroot}"
          package="utilities"
		  tag="${utilities-tag}"
          dest="${build.dir}" />-->
	  <echo message="Exporting utiities files from svn repository:" />
	  <svn>
            <export srcUrl="${svn-utilitiesUrl}"
                destPath="${build.dir}/utilities" />
        </svn>
     <ant inheritAll="false" dir="${build.dir}/utilities" target="jar" />
     <delete file="${utilities}" />
     <copy file="${build.dir}/utilities/build/utilities.jar" todir="${libdir}" />
   </target>



   <target name="helpjar" depends="prepare, emldoc">
      <mkdir dir="${java.help.doc.dir}" />
      <!-- copy morpho docs-->
      <copy todir="${java.help.doc.dir}" filtering="no">
        <fileset dir="${docuserdir}">
          <include name="**/*.html" />
          <include name="**/*.htm"/>
          <include name="**/*.jpg" />
          <include name="**/*.gif" />
          <include name="*.css" />
		  <exclude name="*.html"/>
		  <exclude name="*.htm"/>
		  <exclude name="EMLHandbook.html"/>
          <exclude name="EMLHandbook.html"/>
          <exclude name="advanced/**" />
          <exclude name="EmlDocs/**" />
        </fileset>
      </copy>
      <!-- copy metadata guide docs-->
      <copy todir="${java.help.doc.dir}/EmlDocs/eml_guidebook" filtering="no" file="${docuserdir}/EmlDocs/eml_guidebook/eml_metadata_guide.html" >
      </copy>
      <!-- copy help systm files -->
      <copy todir="." filtering="no">
        <fileset dir="${docuserdir}">
          <include name="${help.system.file}" />
          <include name="${map.file}" />
          <include name="${help.toc}" />
          <include name="${help.index}"/>
        </fileset>
      </copy>
      <!-- copy eml docs
     <copy todir="${java.help.doc.dir}/eml" filtering="no">
        <fileset dir="${build.docs}/${eml-module}/${eml.doc.dir}">
          <include name="**/*.html" />
          <include name="**/*.png" />
          <include name="**/*.css" />
        </fileset>
     </copy>
		 -->
      <!-- Creating search database -->
      <!--<exec dir="${java.help.dir}" executable="${java.help.dir}/jhindexer" >
        <arg line="morphohelp" />
      </exec>-->
      <java jar="${index}" fork="true">
        <arg value="${java.help.doc.dir}"/>
      </java>
     
      <!-- delete help jar and create a new jar file -->
      <delete file="${libdir}/${helpjar}" />
      <jar destfile="${libdir}/${helpjar}" basedir="." includes="${help.system.file},${map.file}, ${help.toc}, ${help.index}, morphohelp/**/*, JavaHelpSearch/**/*">
      </jar>
      <!-- clean up the current dir-->
      <delete>
        <fileset dir="." includes="${help.system.file},${map.file}, ${help.toc}, ${help.index}, ${java.help.doc.dir}/**/*, ${searchDB}/**/*" />
      </delete>
      <delete dir="${java.help.doc.dir}"/>
      <delete dir="${searchDB}" />
   </target>

	 <target name="userguidepdf" depends="init">
        <echo message="Creating ${userguide.fileprefix}.pdf from ${userguide.fileprefix}.tex" />
        <latex 
            latexfile="${userguide.fileprefix}.tex"
            verbose="on"
            clean="on"
            pdftex="on"
        	path="${latex.path}"
            workingDir="${userguide.basedir}">
                <makeindex
                run="on"
                workingDir="${userguide.basedir}"
                path="${latex.path}">
                <fileset dir="${userguide.basedir}">
                   <include name="*.nlo" />
                </fileset>
            </makeindex>
            <bibtex
                run="on"
                workingDir="${userguide.basedir}"
            	path="${latex.path}"
            	/>
        </latex>
    </target>

   <!--
   <target name="compile" depends="clean,itis,prepare">
   -->
   <target name="compile" depends="prepare, utilities, geteml210, geteml211, getstylesheets">

      <jar jarfile="${morpho.basedir}/lib/httpclient.jar">
        <fileset dir="${morpho.basedir}/lib" includes="HTTPClient/**/*.class"/>
      </jar>

      <javac srcdir="${srcdir}"
             destdir="${build.dest}"
             debug="on"
             classpathref="classpath" />
   </target>

   <target name="jar" depends="compile,prepare-lib">
      <delete file="${build.dir}/${name}.jar" />
      <delete file="${build.dir}/${name}-config.jar" />
      <copy todir="${build.dest}/${package.home}/morpho/framework" filtering="no">
        <fileset dir="${srcdir}/${package.home}/morpho/framework/images">
        </fileset>
      </copy>
      <copy todir="${build.dest}/${package.home}/morpho/datapackage" filtering="no">
        <fileset dir="${srcdir}/${package.home}/morpho/datapackage/images">
        </fileset>
      </copy>
      <copy todir="${build.dest}/${package.home}/morpho/query" filtering="no">
        <fileset dir="${srcdir}/${package.home}/morpho/query/images">
        </fileset>
      </copy>
      <copy todir="${build.dest}/${package.home}/morpho/util" filtering="no">
         <fileset dir="${srcdir}/${package.home}/morpho/util/images">
   </fileset>
      </copy>
      <copy todir="${build.dest}/${package.home}/morpho/editor" filtering="no">
        <fileset dir="${srcdir}/${package.home}/morpho/editor/images">
        </fileset>
      </copy>
      <copy todir="${build.dest}/${package.home}/morpho/plugins/datapackagewizard/pages" filtering="no">
         <fileset dir="${srcdir}/${package.home}/morpho/plugins/datapackagewizard/pages/images">
   </fileset>
      </copy>
      <!--
      <copy todir="${build.dest}" filtering="no">
        <fileset dir="${libdir}" excludes="*.jar,HTTPClient/**,SchemaParser/**,*.zip,*.gz"/>
      </copy>
      -->
      <jar jarfile="${build.dir}/${name}.jar" basedir="${build.dest}"
	      includes="${package.home}/${name}/** com/** edu/tesc/**" >
		  <manifest>
           <attribute name="Built-By" value="${user.name}"/>
           <attribute name="Main-Class" value="edu.ucsb.nceas.morpho.Morpho"/>  
			<attribute name="Class-Path" value="../ ../lib/"/>       
        </manifest>
	  </jar>
      <jar jarfile="${build.dir}/${name}-config.jar" basedir="${build.lib}"
           excludes="*.jar,HTTPClient/**,SchemaParser/**,LiveMap/**,*.zip,*.gz,axis/**,launch4j/**">
      		<metainf file="${build.lib}/mime.types"/>
      	</jar>
	   <copy file="${build.dir}/${name}-config.jar" tofile="${libdir}/${name}-config.jar"/>
   </target>

	<!-- copy necessary resources to build lib -->
	<target name="prepare-lib" depends="prepare">
		<copy todir="${build.lib}" filtering="no">
		        <fileset dir="${libdir}" 
		        	excludes="*.jar,HTTPClient/**,SchemaParser/**,LiveMap/**,*.zip,*.gz,maven/**"/>
		</copy>
		<copy todir="${build.lib}" filtering="no">
		        <fileset dir="${libdir}" 
		        	includes="*.jar" excludes="maven-ant-tasks*.jar"/>
			<fileset dir="${libdir}/axis" 
					 includes="*.jar"/>
		</copy>
		<copy todir="${build.lib}" filtering="no">
			<fileset refid="dependency.fileset" />
			<!-- This mapper strips off all leading directory information -->
			<mapper type="flatten" />
		</copy>
		<copy file="${morpho.basedir}/CONTRIBUTORS.txt" todir="${build.lib}" filtering="no" />
	</target>
	
   <target name="install" depends="jar">
      <copy file="${build.dir}/${name}.jar" todir="${build.lib}" />
      <copy file="${build.dir}/${name}-config.jar" todir="${build.lib}" />
      <echo message="Install complete. Use the morpho script to run it." />
   </target>
	
   <target name="sign" depends="install">
      <signjar jar="${build.lib}/${name}.jar" alias="myself"
               storepass="${storepass}" keystore="${keystore}"/>
      <signjar jar="${build.lib}/${name}-config.jar" alias="myself"
               storepass="${storepass}" keystore="${keystore}"/>
   </target>

   <target name="jws" depends="sign">
      <mkdir dir="${jwsdir}"/>
      <copy todir="${jwsdir}" filtering="no">
        <fileset dir=".">
          <include name="*.jnlp"/>
        </fileset>
        <fileset dir="${build.lib}">
          <include name="*.jar"/>
        </fileset>
      </copy>
   </target>

   <target name="dist" depends="install,docs,jdoc">
      <mkdir dir="${dist.dir}"/>
      <delete dir="${morpho.dir}" />
      <mkdir dir="${morpho.dir}"/>
      <mkdir dir="${morpho.lib}"/>
      <mkdir dir="${morpho.lib.sampledata}"/>
      <mkdir dir="${morpho.docs}"/>
      <mkdir dir="${morpho.xsl}"/>
      <mkdir dir="${morpho.docs.dev}"/>
      <mkdir dir="${morpho.docs.dev.api}"/>
      <copy file="${morpho.basedir}/LICENSE" todir="${morpho.dir}"/>
      <copy file="${morpho.basedir}/morpho" todir="${morpho.dir}"/>
      <copy file="${morpho.basedir}/morpho.bat" todir="${morpho.dir}"/>
      <copy file="${morpho.basedir}/README.txt" todir="${morpho.dir}"/>
      <copy todir="${morpho.lib.sampledata}">
        <fileset dir="${morpho.basedir}/lib/sampledata"/>
      </copy>
      <copy todir="${morpho.xsl}">
        <fileset dir="${morpho.basedir}/xsl"/>
      </copy>
      <copy todir="${morpho.docs}">
        <fileset dir="${build.docs}">
          <exclude name="**/api"/>
        </fileset>
      </copy>
      <copy todir="${morpho.docs.dev.api}">
        <fileset dir="${build.docs}/api"/>
      </copy>
   	
    <copy todir="${morpho.lib}">
        <fileset dir="${build.lib}" >
        	<include name="*.jar"/>
        </fileset>
   	</copy>
   	
<!--   	
      <copy file="./lib/itislib.jar" todir="${morpho.lib}"/>
      <copy file="./lib/shippedIcons.jar" todir="${morpho.lib}"/>
      <copy file="./lib/morpho.jar" todir="${morpho.lib}"/>
      <copy file="./lib/xalan.jar" todir="${morpho.lib}"/>
      <copy file="./lib/httpclient.jar" todir="${morpho.lib}"/>
      <copy file="./lib/jsse.jar" todir="${morpho.lib}"/>
      <copy file="./lib/jcert.jar" todir="${morpho.lib}"/>
      <copy file="./lib/jnet.jar" todir="${morpho.lib}"/>
      <copy file="./lib//${name}-config.jar" todir="${morpho.lib}"/>
      <copy file="./lib/xercesImpl.jar" todir="${morpho.lib}"/>
      <copy file="./lib/kunststoff.jar" todir="${morpho.lib}"/>
      <copy file="./lib/xml-apis.jar" todir="${morpho.lib}"/>
      <copy file="./lib/liveMap.jar" todir="${morpho.lib}"/>
      <copy file="./lib/jhall.jar" todir="${morpho.lib}"/>
      <copy file="./lib/morphohelp.jar" todir="${morpho.lib}"/>
-->

      <delete file="${morpho.basedir}/lib/morpho-${release}.zip"/>
      <zip zipfile="${morpho.basedir}/lib/morpho-${release}.zip" basedir="${dist.dir}"/>
      <delete file="${morpho.basedir}/lib/morpho-${release}.tar.gz" />
      <tar tarfile="${morpho.basedir}/lib/morpho-${release}.tar" basedir="${dist.dir}"/>
      <gzip zipfile="${morpho.basedir}/lib/morpho-${release}.tar.gz"
                src="${morpho.basedir}/lib/morpho-${release}.tar"/>
      <delete file="${morpho.basedir}/lib/morpho-${release}.tar" />
  </target>

  <target name="distsrc" depends="dist">
      <mkdir dir="${morpho.src}"/>
      <copy todir="${morpho.src}">
        <fileset dir="${morpho.basedir}/src"/>
      </copy>
      <mkdir dir="${morpho.lib.HTTPClient}"/>
      <copy todir="${morpho.lib.HTTPClient}">
        <fileset dir="${morpho.basedir}/lib/HTTPClient"/>
      </copy>

      <delete file="${morpho.basedir}/lib/morpho-src-${release}.zip"/>
      <zip zipfile="${morpho.basedir}/lib/morpho-src-${release}.zip" basedir="${dist.dir}"/>
      <delete file="${morpho.basedir}/lib/morpho-src-${release}.tar.gz" />
      <tar tarfile="${morpho.basedir}/lib/morpho-src-${release}.tar" basedir="${dist.dir}"/>
      <gzip zipfile="${morpho.basedir}/lib/morpho-src-${release}.tar.gz"
                src="${morpho.basedir}/lib/morpho-src-${release}.tar"/>
      <delete file="${morpho.basedir}/lib/morpho-src-${release}.tar" />
  </target>

   <target name="clean" depends="init">
       <delete dir="${build.dir}" />
       <delete dir="${morpho.dir}" />
       <delete dir="${dist.dir}"/>
   		<delete file="${libdir}/${name}-config.jar" />
   </target>
	
   <!--Except clean, it also delete utilies.jar, eml-210 schema and eml201to210.xsl file.
		Those files are checked out from another cvs.-->
   <target name="fullclean" depends="clean">
       <delete dir="${schemadir}/eml-2.1.0" />
    	<delete dir="${schemadir}/eml-2.1.1" />
       <delete file="${utilities}" />
    	<delete file="${httpclient}" />
		<delete file="${xsldir}/eml201to210.xsl" />
		<delete file="${xsldir}/eml201to211.xsl" />
		<delete file="${xsldir}/eml210to211.xsl" />
		<delete file="${xsldir}/eml2tonbii.xsl" />
   		<delete dir="${styledir}/eml2" excludes="eml-settings.xsl" />
   </target>

   <target name="docs" depends="init">
     <mkdir dir="${build.docs}"/>
     <mkdir dir="${build.docs}/user"/>
     <mkdir dir="${build.docs}/user/advanced"/>
     <mkdir dir="${build.docs}/licenses"/>
     <copy file="${morpho.basedir}/docs/README.txt" todir="${build.docs}"/>
     <copy todir="${build.docs}/licenses" filtering="no">
       <fileset dir="${morpho.basedir}/docs/licenses">
          <exclude name="**/*.html"/>
       </fileset>
     </copy>
     <copy todir="${build.docs}/user" filtering="no">
       <fileset dir="${morpho.basedir}/docs/user">
          <exclude name="**/*.html"/>
       </fileset>
     </copy>
     <copy todir="${build.docs}/user" filtering="yes">
       <fileset dir="${morpho.basedir}/docs/user">
         <include name="*.html"/>
       </fileset>
     </copy>
     <copy todir="${build.docs}/user/advanced" filtering="yes">
       <fileset dir="${morpho.basedir}/docs/user/advanced">
         <include name="*.html"/>
       </fileset>
     </copy>

   </target>

   <target name="jdoc" depends="init">
       <mkdir dir="${build.javadocs}" />
       <javadoc packagenames="edu.ucsb.nceas.*"
           sourcepath="src"
           destdir="${build.javadocs}"
           author="true"
           version="true"
           use="true"
           windowtitle="${Name} API"
           doctitle="&lt;h1&gt;${Name}&lt;/h1&gt;"
           bottom="&lt;i&gt;Copyright &#169; 2000 National Center for Ecological Analysis and Synthesis. All Rights Reserved.&lt;/i&gt;"
       />
   </target>

   <target name="run" depends="install">
     <java classname="edu.ucsb.nceas.morpho.Morpho"
           fork="yes" dir="${morpho.basedir}" >
     	<classpath>
     		<path refid="classpath.runtime" />
     		<pathelement path="${morpho}:${help}"/>
     	</classpath>
     	<arg line="${morpho.args}"/>
       <jvmarg value="-Xmx512m"/>
       <jvmarg value="-Xss1m"/>
       <jvmarg value="-Djava.protocol.handler.pkgs=HTTPClient"/>
     </java>
   </target>
	
	<!--
   This target uses Launch$J (see http://launch4j.sourceforge.net/)
   It will create a file ("Kepler-launch.exe" that will launch Kepler on a Windows box
   Dan Higgins - Nov 2007
--> 
  <target name="buildwinexe" depends="install"> 
       <!-- NOTE: location is machine specific - insert 'Launch4J' location on your machine!  -->
      <delete file="${morpho.basedir}/morpho.exe"/>
      <taskdef name="launch4j"
               classname="net.sf.launch4j.ant.Launch4jTask"
               classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" 
      onerror="ignore"/>
      <!--launch4j configFile="${morpho.basedir}/installer/build/launch-morpho.xml"/-->
    <launch4j>
      	<config 
      		dontwrapjar="true" 
      		headertype="gui" 
      		outfile="${morpho.basedir}/morpho.exe" 
      		errtitle="Morpho" 
      		cmdline="${morpho.args}" 
      		chdir="." 
      		priority="normal" 
      		downloadurl="http://java.com/download" 
      		customprocname="false" 
      		stayalive="false" 
      		icon="${libdir}/DesktopIcon32x32.ico">
      	  <classPath mainClass="edu.ucsb.nceas.morpho.Morpho">
      	    <cp>%EXEDIR%/lib/*.jar</cp>    
      	  </classPath>
      	  <jre minVersion="1.6.0" jdkPreference="preferJre">
      	    <opt>-Xmx512m</opt>
      	    <opt>-Xss5m</opt>
      	    <opt>-Djava.endorsed.dirs=&quot;%EXEDIR%/lib/jar/apache&quot;</opt>
      	    <opt>-Djava.library.path=&quot;%EXEDIR%/lib&quot;</opt>
      	  </jre>
      	</config>
		</launch4j>
  </target> 
	
	<!-- The target 'macjarbundler' builds a Mac OS X application bundle.
     This provides a double-clickable icon that will launch a java
     application on the Mac without the need to open the terminal and
     type a long command string. It it thus similar to creating an 
     .exe file from launching Kepler on Windows.

     The target uses an ant taskdef called 'jarbundler' 
     (see http://informagen.com/JarBundler/). For the target to work a
     'jarbundler-n.n.jar' must be added to the ant /lib directory. This
     task is supposed to be cross-platform (as long as a file called
     'JavaApplicationStub' is available. However, I encountered a
     problem with building the application bundle on a Windows machine
     and moving the result to a Mac due to differences between '\' and
     '/' in the classpath. It is thus suggested that this be run on a
     Mac. (Dan Higgins 11/2007)
-->          
  <target name="macjarbundler" depends="install">
      <taskdef name="jarbundler" 
         classpath="${morpho.basedir}/lib/jarbundler-2.2.0.jar"
         classname="net.sourceforge.jarbundler.JarBundler" 
         onerror="ignore" />
  	<echo message="Using morpho args: ${morpho.args}"></echo>
      <jarbundler dir="${morpho.basedir}/"
            name="morpho"
		    stubfile="${morpho.basedir}/installer/build/mac/JavaApplicationStub"
            mainclass="edu.ucsb.nceas.morpho.Morpho"
            jvmversion="1.6"
            icon="${morpho.basedir}/lib/DesktopIcon32x32.icns"
            vmoptions="-Xmx512m -Xss5m" 
      		arguments="${morpho.args}">
      		<jarfileset dir="${build.lib}">
      			<include name="*.jar" />
      		</jarfileset>
        </jarbundler>
  </target>

	
	<!--Generates installer for windows, mac and linux-->
   <target name="buildallinstallers" depends="clean, buildwininstaller, buildmacinstaller, buildlinuxinstaller" description="build all installlers for windows, mac and linux"/>
  
   <!--
   This target uses Launch4J (see http://launch4j.sourceforge.net/)
   It will create a file ("morpho-installer.exe" that will install morpho on a Windows box
   Dan Higgins - Jan 2008
	--> 
  <target name="buildwininstaller" depends="init,wininstallercleanup,buildwinexe">
	  <property name="windows" value="windows">
		  
	  </property>
	  <antcall target="makeinstaller">
		  <param name="os-name" value="${windows}"/>
          <param name="version" value="${release}"/>
		  <param name="izpackjar" value="${izpackjar}"/>
	  </antcall>
      <taskdef name="launch4j"
               classname="net.sf.launch4j.ant.Launch4jTask"
               classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/xstream.jar" 
      onerror="ignore"/>
      <launch4j configFile="${morpho.basedir}/installer/build/launch-installer.xml"
                outfile="${morpho.basedir}/morpho-${release}.exe" jar="${morpho.basedir}/morpho-${release}-${windows}.jar"/>
  </target>
	
  
  <!--Builds jar file for mac. Before run it, please edit installer/build/install.xml file  -->
  <target name="buildmacinstaller" depends="init,macinstallercleanup,macjarbundler">
	  <antcall target="makeinstaller">
		  <param name="os-name" value="mac"/>
          <param name="version" value="${release}"/>
		  <param name="izpackjar" value="${izpackjar}"/>
	  </antcall>
  </target>
	
  <!--Builds jar installer file for linux.   -->
  <target name="buildlinuxinstaller" depends="init,linuxinstallercleanup,install"> 
	  
	  <antcall target="makeinstaller">
		  <param name="os-name" value="linux"/>
          <param name="version" value="${release}"/>
		  <param name="izpackjar" value="${izpackjar}"/>
	   </antcall>
  </target>



	
	
  <!-- The target "makeinstaller" uses the IzPack installer system (see http://izpack.org/)
     to create an installer jar file. This is based on the script $KEPLER/installer/build/install.xml.
     A jar file called 'IzPack-install.jar' is created in $KEPLER dir. This jar can be executed by
     double clicking on Windows and on Mac OS X.
     Dan Higgins - Nov 2007
   -->
  <target name="makeinstaller">
      
      <taskdef name="izpack" classpath="${izpackjar}"
         classname="com.izforge.izpack.ant.IzPackTask"
         onerror="ignore"/>

  <!-- We call IzPack -->
    <echo message="Makes the installer using IzPack"/>
    <izpack input="${morpho.basedir}/installer/build/install-${os-name}.xml"
        output="${morpho.basedir}/morpho-${release}-${os-name}.jar"
        installerType="standard"
        basedir="${morpho.basedir}/" 
    	inheritAll="true"/>
   </target>
	
	<!-- the following 3 targets clean up the build for system specific installers -->
	<target name="macinstallercleanup">
		 <delete file="${morpho.basedir}/morpho-${release}-mac.jar"/>
		 <delete dir="${morpho.basedir}/morpho.app"/>
   </target>
	
	<target name="wininstallercleanup">
         <delete file="${morpho.basedir}/morpho-${release}-windows.jar"/>
         <delete file="${morpho.basedir}/morpho-${release}.exe"/>
   </target>
	
	<target name="linuxinstallercleanup">
         <delete file="${morpho.basedir}/morpho-${release}-linux.jar"/>
   </target>

   <!-- use the ant "junit" task to run JUnit tests. -->
   <target name="test" depends="install">
      <!-- copy and compile the tests into a jar file -->
      <mkdir dir="${build.tests}"/>
      <copy todir="${build.tests}" filtering="yes">
        <fileset dir="${testdir}">
          <exclude name="**/CVS*"/>
          <exclude name="**/.#*"/>
        </fileset>
      </copy>
      <javac srcdir="${build.tests}"
             destdir="${build.dest}"
      		 classpathref="classpath"
             debug="on"/>

      <jar jarfile="${build.dir}/${name}-test.jar" basedir="${build.dest}"
           includes="${package.home}/${name}test/**" />

      <!-- use the ant "junit" task to run JUnit tests. -->
      <junit printsummary="yes" haltonfailure="no" fork="no"
             haltonerror="no">
        <classpath>
        	<path refid="classpath" />
          <pathelement path="${build.dir}/${name}-test.jar" />
        </classpath>

        <formatter type="plain" />

        <batchtest fork="yes" todir="${build.dir}">
          <fileset dir="${build.tests}">
            <include name="**/*.java" />
          </fileset>
        </batchtest>
     </junit>
   </target>

   <!-- use the ant "junit" task to run one JUnit tests. -->
   <target name="runonetest" depends="install">
      <echo>testtorun: ${testtorun}</echo>
      <!-- copy and compile the tests into a jar file -->
      <mkdir dir="${build.tests}"/>
      <copy todir="${build.tests}" filtering="yes">
        <fileset dir="${testdir}">
          <exclude name="**/CVS*"/>
          <exclude name="**/.#*"/>
        </fileset>
      </copy>
      <javac srcdir="${build.tests}"
             destdir="${build.dest}"
             classpathref="classpath"
             debug="on"/>

      <jar jarfile="${build.dir}/${name}-test.jar" basedir="${build.dest}"
           includes="${package.home}/${name}test/**" />

      <!-- use the ant "junit" task to run JUnit one test. -->
      <junit printsummary="yes" haltonfailure="no" fork="yes"
             haltonerror="no" showoutput="yes">
        <classpath>
          <fileset dir="${build.lib}">
                <include name="*.jar" />
			    <exclude name="standalone-compiler.jar"/>
            </fileset>
          <pathelement path="${build.dir}/${name}-test.jar" />
        </classpath>

        <formatter type="plain" />
      	 
      	<batchtest fork="yes" todir="${build.dir}">
      	          <fileset dir="${build.tests}">
      	            <include name="**/${testtorun}.java" />
      	          </fileset>
      	  </batchtest>
     </junit>
   </target>

   <!-- build the itis library for querying ITIS -->
   <target name="itis" depends="init">
     <ant dir="${itisdir}" />
     <copy file="${itisdir}/lib/itislib.jar" todir="${libdir}" />
   </target>

</project>
