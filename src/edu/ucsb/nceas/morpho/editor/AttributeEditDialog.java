/**
 *        Name: AttributeEditDialog.java
 *  Copyright: 2000 Regents of the University of California and the
 *              National Center for Ecological Analysis and Synthesis
 *    Authors: @higgins@
 *    Release: @release@
 *
 *   '$Author: higgins $'
 *     '$Date: 2001-06-05 22:52:30 $'
 * '$Revision: 1.1 $'
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package edu.ucsb.nceas.morpho.editor;

/*
		A basic implementation of the JDialog class.
*/

import java.awt.*;
import javax.swing.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;

public class AttributeEditDialog extends javax.swing.JDialog implements TableModelListener
{
  public DefaultTableModel dtm;
  public JTable table = null;
  public Hashtable attributes;
  
	public AttributeEditDialog(Frame parent)
	{
		super(parent);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(329,176);
		setVisible(false);
		getContentPane().add(BorderLayout.CENTER,AttributeScrollPane);
		//}}
		
		    String[] headers = new String[2];
        headers[0] = "Attribute Name";
        headers[1] = "Attribute Value";
        dtm = new DefaultTableModel(headers,0);
        dtm.addTableModelListener(this);
        table = new JTable(dtm);
        AttributeScrollPane.getViewport().add(table);

  }
  
	public AttributeEditDialog(Frame parent, String title, Hashtable attrs) {
    this(parent);
    setTitle(title);
    this.attributes = attrs;
    
    String[] row = new String[2];
    Enumeration enum = attrs.keys();
    while (enum.hasMoreElements()) {
      row[0] = (String)enum.nextElement();
      row[1] = (String)attrs.get(row[0]);
      dtm.addRow(row);
    }
    for (int i=0;i<20;i++) {
      row[0] = "";
      row[1] = "";
      dtm.addRow(row);
    }
    
	}

	public AttributeEditDialog()
	{
		this((Frame)null);
	}

	public AttributeEditDialog(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	static public void main(String args[])
	{
		(new AttributeEditDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JScrollPane AttributeScrollPane = new javax.swing.JScrollPane();
	//}}



 public void tableChanged(TableModelEvent e) {
 
 }

}