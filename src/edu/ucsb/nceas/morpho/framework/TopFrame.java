/**
 *        Name: TopFrame.java
 *     Purpose: A Class that is the top frame for an XML_Client
 *		application
 *   Copyright: 2000 Regents of the University of California and the
 *              National Center for Ecological Analysis and Synthesis
 *     Authors: Dan Higgins
 *
 *     Version: '$Id: TopFrame.java,v 1.1 2000-05-31 15:37:07 higgins Exp $'
 */
 
package edu.ucsb.nceas.dtclient;
 
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.JToolBar.Separator;
import org.apache.xml.serialize.*;
import java.io.*;

import java.util.PropertyResourceBundle;
import com.symantec.itools.javax.swing.JButtonGroupPanel;
import java.net.*;
import java.io.*;
import java.util.*;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import org.w3c.dom.Text;
import org.xml.sax.InputSource;
import org.xml.sax.ErrorHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.apache.xerces.parsers.DOMParser;

import org.apache.xalan.xpath.xml.FormatterToXML;
import org.apache.xalan.xpath.xml.TreeWalker;

/**
 * A basic JFC 1.1 based application.
 */
public class TopFrame extends javax.swing.JFrame
{
    DOMTree m_tree;
    
    TreeView editpanel;
    String 	xmlcatalogfile = null;
    String MetaCatServletURL = null;
    PropertyResourceBundle options = null;

	public TopFrame()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setJMenuBar(JMenuBar1);
		setTitle("XML - NCEAS");
		setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(752,536);
		setVisible(false);

		saveFileDialog.setMode(FileDialog.SAVE);
		saveFileDialog.setTitle("Save");
 
 		openFileDialog.setMode(FileDialog.LOAD);
		openFileDialog.setTitle("Open");

		JPanel2.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
		getContentPane().add(BorderLayout.NORTH, JPanel2);
		JPanel2.setBounds(0,0,752,33);
		JToolBar1.setAlignmentY(0.222222F);
		JPanel2.add(JToolBar1);
		JToolBar1.setBounds(0,0,395,33);
		newButton.setDefaultCapable(false);
		newButton.setToolTipText("Create a new document");
		newButton.setMnemonic((int)'N');
		JToolBar1.add(newButton);
		newButton.setBounds(16,4,51,27);
		openButton.setDefaultCapable(false);
		openButton.setToolTipText("Open an existing document");
		openButton.setMnemonic((int)'O');
		JToolBar1.add(openButton);
		openButton.setBounds(67,4,51,27);
		saveButton.setDefaultCapable(false);
		saveButton.setToolTipText("Save the active document");
		saveButton.setMnemonic((int)'S');
		JToolBar1.add(saveButton);
		saveButton.setBounds(118,4,51,27);
//
        JToolBar1.add(JTBSeparator1);
		JTBSeparator1.setBounds(169,2,10,5);
		cutButton.setDefaultCapable(false);
		cutButton.setToolTipText("Cut the selection and put it on the Clipboard");
		cutButton.setMnemonic((int)'T');
		JToolBar1.add(cutButton);
		cutButton.setBounds(179,4,51,27);
		copyButton.setDefaultCapable(false);
		copyButton.setToolTipText("Copy the selection and put it on the Clipboard");
		copyButton.setMnemonic((int)'C');
		JToolBar1.add(copyButton);
		copyButton.setBounds(230,4,51,27);
		pasteButton.setDefaultCapable(false);
		pasteButton.setToolTipText("Insert Clipboard contents");
		pasteButton.setMnemonic((int)'P');
		JToolBar1.add(pasteButton);
		pasteButton.setBounds(281,4,51,27);
	//	
		JToolBar1.add(JTBSeparator2);
		JTBSeparator2.setBounds(332,2,10,5);
		aboutButton.setDefaultCapable(false);
		aboutButton.setToolTipText("Display program information, version number and copyright");
		aboutButton.setMnemonic((int)'A');
		JToolBar1.add(aboutButton);
		aboutButton.setBounds(342,4,51,27);
		
	// JPanel1 is top level container for most components
		JPanel1.setLayout(new BorderLayout(0,0));
		getContentPane().add(BorderLayout.CENTER, JPanel1);
		JPanel1.setBounds(0,33,752,503);
		JPanel1.add(BorderLayout.CENTER,JTabbedPane1);
		JTabbedPane1.setBounds(0,0,752,503);
	// IntroPanel setup	
		IntroPanel.setLayout(new BorderLayout(0,0));
		JTabbedPane1.add(IntroPanel);
		IntroPanel.setBounds(2,27,747,473);
		IntroPanel.setVisible(false);
		NSFLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		NSFLabel.setText("Funded by the National Science Foundation");
		IntroPanel.add(BorderLayout.CENTER,NSFLabel);
		NSFLabel.setBounds(0,0,747,338);
		NCEASLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		NCEASLabel.setText("Created at the National Center for Ecological Analysis & Synthesis");
		IntroPanel.add(BorderLayout.SOUTH, NCEASLabel);
		NCEASLabel.setBounds(0,338,747,135);
	// EditorPanel is 2nd tab in primary layout
		EditorPanel.setLayout(new BorderLayout(0,0));
		JTabbedPane1.add(EditorPanel);
		EditorPanel.setVisible(false);
	// QueryPanel is 3nd tab in primary layout
	// QueryPanel is made up of 2 tabbed panels (input and output)
		JTabbedPane1.add(QueryPanel);
		QueryPanel.setLayout(new BorderLayout(0,0));
		QueryPanel.setVisible(false);
	// Input Panel - Sub Panel of QueryPanel
		InputPanel.setLayout(new BorderLayout(0,0));
		QueryPanel.add(BorderLayout.WEST, InputPanel);
		LabelPanel.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		InputPanel.add(BorderLayout.NORTH, LabelPanel);
		QueryLabel.setText("Metadata Queries");
		LabelPanel.add(QueryLabel);
		QueryLabel.setForeground(java.awt.Color.black);
		QueryLabel.setBounds(36,5,101,15);
		InputPanel.add(BorderLayout.CENTER, TabbedQueryPane);
		TabbedQueryPane.setFont(new Font("Dialog", Font.PLAIN, 12));
		TextQueryPanel.setLayout(new BorderLayout(0,0));
		TabbedQueryPane.add(TextQueryPanel);
		TextQueryPanel.setVisible(false);
		JPanelTextSearch.setAlignmentX(0.42735F);
		JPanelTextSearch.setLayout(new GridBagLayout());
		TextQueryPanel.add(BorderLayout.CENTER, JPanelTextSearch);
		JPanelTextSearch.setBounds(0,0,169,378);
		JPanelTextSearch.add(TextField1,new com.symantec.itools.awt.GridBagConstraintsD(0,0,3,1,1.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.HORIZONTAL,new Insets(40,10,0,10),0,5));
		TextField1.setBounds(10,35,149,24);
		JLabel1.setText("Search Text:");
		JPanelTextSearch.add(JLabel1,new com.symantec.itools.awt.GridBagConstraintsD(0,1,1,1,0.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.NONE,new Insets(6,4,0,0),67,15));
		JLabel1.setForeground(java.awt.Color.black);
		JLabel1.setFont(new Font("Dialog", Font.PLAIN, 12));
		JLabel1.setBounds(4,65,134,30);
		AndOrGroupPanel.setLayout(new GridLayout(1,0,0,0));
		AndOrGroupPanel.setEnabled(false);
		JPanelTextSearch.add(AndOrGroupPanel,new com.symantec.itools.awt.GridBagConstraintsD(0,2,2,1,0.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.NONE,new Insets(15,0,0,0),0,23));
		AndOrGroupPanel.setBounds(19,110,100,46);
		AndRadioButton.setText("AND");
		AndRadioButton.setActionCommand("AND");
		AndRadioButton.setEnabled(false);
		AndOrGroupPanel.add(AndRadioButton);
		AndRadioButton.setFont(new Font("Dialog", Font.PLAIN, 12));
		AndRadioButton.setBounds(0,0,50,46);
		ORRadioButton.setSelected(true);
		ORRadioButton.setText("OR");
		ORRadioButton.setActionCommand("OR");
		ORRadioButton.setEnabled(false);
		AndOrGroupPanel.add(ORRadioButton);
		ORRadioButton.setFont(new Font("Dialog", Font.PLAIN, 12));
		ORRadioButton.setBounds(50,0,50,46);
		TextField2.setEditable(false);
		JPanelTextSearch.add(TextField2,new com.symantec.itools.awt.GridBagConstraintsD(0,3,3,1,1.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.HORIZONTAL,new Insets(19,10,0,10),0,5));
		TextField2.setBounds(10,175,149,24);
		JLabel8.setText("Search Text:");
		JLabel8.setEnabled(false);
		JPanelTextSearch.add(JLabel8,new com.symantec.itools.awt.GridBagConstraintsD(0,4,1,1,0.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.NONE,new Insets(6,4,0,0),67,15));
		JLabel8.setForeground(java.awt.Color.black);
		JLabel8.setFont(new Font("Dialog", Font.PLAIN, 12));
		JLabel8.setBounds(4,205,134,30);
		OutputChoice.setLayout(new GridLayout(2,1,0,0));
		JPanelTextSearch.add(OutputChoice,new com.symantec.itools.awt.GridBagConstraintsD(0,5,4,1,1.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.HORIZONTAL,new Insets(13,10,39,10),0,48));
		OutputChoice.setBounds(10,248,149,96);
		HTMLOutput.setText("HTML Output");
		HTMLOutput.setActionCommand("HTML Output");
		OutputChoice.add(HTMLOutput);
		HTMLOutput.setFont(new Font("Dialog", Font.PLAIN, 12));
		HTMLOutput.setBounds(1,1,147,47);
		XMLOutput.setSelected(true);
		XMLOutput.setText("XML Output");
		XMLOutput.setActionCommand("XML Output");
		OutputChoice.add(XMLOutput);
		XMLOutput.setFont(new Font("Dialog", Font.PLAIN, 12));
		XMLOutput.setBounds(1,48,147,47);
		JLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel2.setText("Full Text Search of Metadata");
		JLabel2.setOpaque(true);
		TextQueryPanel.add(BorderLayout.SOUTH, JLabel2);
		JLabel2.setBackground(java.awt.Color.white);
		JLabel2.setForeground(java.awt.Color.black);
		JLabel2.setFont(new Font("Dialog", Font.PLAIN, 12));
		JLabel2.setBounds(0,378,169,15);
		TitleQueryPanel.setLayout(new BorderLayout(0,0));
		TabbedQueryPane.add(TitleQueryPanel);
		TitleQueryPanel.setBounds(2,27,169,393);
		TitleQueryPanel.setVisible(false);
		JPanel4.setLayout(new GridBagLayout());
		TitleQueryPanel.add(BorderLayout.CENTER, JPanel4);
		JPanel4.setBounds(0,0,169,378);
		JPanel4.add(IDTextField,new com.symantec.itools.awt.GridBagConstraintsD(0,0,2,1,1.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.HORIZONTAL,new Insets(20,10,0,10),0,5));
		IDTextField.setBounds(10,20,149,24);
		JLabel7.setText("Document ID:");
		JPanel4.add(JLabel7,new com.symantec.itools.awt.GridBagConstraintsD(0,1,1,1,0.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.NONE,new Insets(6,4,0,0),5,0));
		JLabel7.setForeground(java.awt.Color.black);
		JLabel7.setFont(new Font("Dialog", Font.PLAIN, 12));
		JLabel7.setBounds(4,50,80,15);
		OutputChoice1.setLayout(new GridLayout(2,1,0,0));
		JPanel4.add(OutputChoice1,new com.symantec.itools.awt.GridBagConstraintsD(0,2,3,1,0.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.NONE,new Insets(115,5,150,4),62,0));
		OutputChoice1.setBounds(5,180,160,48);
		HTMLOutput1.setText("HTML Output");
		HTMLOutput1.setActionCommand("HTML Output");
		OutputChoice1.add(HTMLOutput1);
		HTMLOutput1.setFont(new Font("Dialog", Font.PLAIN, 12));
		HTMLOutput1.setBounds(1,1,158,23);
		XMLOutput1.setSelected(true);
		XMLOutput1.setText("XML Output");
		XMLOutput1.setActionCommand("XML Output");
		OutputChoice1.add(XMLOutput1);
		XMLOutput1.setFont(new Font("Dialog", Font.PLAIN, 12));
		XMLOutput1.setBounds(1,24,158,23);
		JLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel3.setText("Search by Document ID or Title");
		JLabel3.setOpaque(true);
		TitleQueryPanel.add(BorderLayout.SOUTH, JLabel3);
		JLabel3.setBackground(java.awt.Color.white);
		JLabel3.setForeground(java.awt.Color.black);
		JLabel3.setFont(new Font("Dialog", Font.PLAIN, 12));
		JLabel3.setBounds(0,378,169,15);
		StructuredQueryPanel.setLayout(new BorderLayout(0,0));
		TabbedQueryPane.add(StructuredQueryPanel);
		StructuredQueryPanel.setBounds(2,27,169,393);
		StructuredQueryPanel.setVisible(false);
		JPanel6.setLayout(null);
		StructuredQueryPanel.add(BorderLayout.CENTER, JPanel6);
		JPanel6.setBounds(0,0,169,378);
		JLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel4.setText("Structured Query Using Path");
		JLabel4.setOpaque(true);
		StructuredQueryPanel.add(BorderLayout.SOUTH, JLabel4);
		JLabel4.setBackground(java.awt.Color.white);
		JLabel4.setForeground(java.awt.Color.black);
		JLabel4.setFont(new Font("Dialog", Font.PLAIN, 12));
		JLabel4.setBounds(0,378,169,15);
		LocalQueryPanel.setLayout(new BorderLayout(0,0));
		TabbedQueryPane.add(LocalQueryPanel);
		LocalQueryPanel.setBounds(2,27,169,393);
		LocalQueryPanel.setVisible(false);
		JPanel5.setLayout(new GridBagLayout());
		LocalQueryPanel.add(BorderLayout.CENTER, JPanel5);
		JPanel5.setBounds(0,0,169,378);
		OpenFileButton.setText("Open Local XML File");
		OpenFileButton.setActionCommand("Open Local XML File");
		JPanel5.add(OpenFileButton,new com.symantec.itools.awt.GridBagConstraintsD(0,0,2,1,0.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.NONE,new Insets(26,10,0,0),0,0));
		OpenFileButton.setBounds(10,26,149,25);
		xpathTextField.setText("//*[contains(text(),\"Song\")]");
		JPanel5.add(xpathTextField,new com.symantec.itools.awt.GridBagConstraintsD(0,1,3,1,1.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.HORIZONTAL,new Insets(17,10,0,10),0,5));
		xpathTextField.setBounds(10,68,149,24);
		JLabel9.setText("XPath String");
		JPanel5.add(JLabel9,new com.symantec.itools.awt.GridBagConstraintsD(0,2,1,1,0.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.NONE,new Insets(0,10,268,0),65,3));
		JLabel9.setForeground(java.awt.Color.black);
		JLabel9.setFont(new Font("Dialog", Font.PLAIN, 12));
		JLabel9.setBounds(10,92,132,18);
		JLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel5.setText("Query Local Document (XPath)");
		JLabel5.setOpaque(true);
		LocalQueryPanel.add(BorderLayout.SOUTH, JLabel5);
		JLabel5.setBackground(java.awt.Color.white);
		JLabel5.setForeground(java.awt.Color.black);
		JLabel5.setFont(new Font("Dialog", Font.PLAIN, 12));
		JLabel5.setBounds(0,378,169,15);
		TabbedQueryPane.setSelectedComponent(TextQueryPanel);
		TabbedQueryPane.setSelectedIndex(0);
		TabbedQueryPane.setTitleAt(0,"Text");
		TabbedQueryPane.setTitleAt(1,"Titles");
		TabbedQueryPane.setTitleAt(2,"Path");
		TabbedQueryPane.setTitleAt(3,"Local");
		ParamPanel.setLayout(new BorderLayout(0,0));
		InputPanel.add(BorderLayout.SOUTH, ParamPanel);
		ParamPanel.setBounds(0,448,174,25);
		SubmitPanel.setLayout(new GridBagLayout());
		ParamPanel.add(BorderLayout.NORTH, SubmitPanel);
		SubmitPanel.setBounds(0,0,174,25);
		SubmitButton.setText("Submit Query");
		SubmitButton.setActionCommand("Submit Query");
		SubmitPanel.add(SubmitButton, new com.symantec.itools.awt.GridBagConstraintsD(-1,-1,1,1,0.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
		SubmitButton.setBounds(31,0,111,25);
		
	// OutputPanel - Sub Panel of QueryPanel
		OutputPanel.setLayout(new BorderLayout(0,0));
		QueryPanel.add(BorderLayout.CENTER, OutputPanel);
		OutputPanel.setBounds(174,0,573,473);
		JPanel3.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		OutputPanel.add(BorderLayout.NORTH, JPanel3);
		JPanel3.setBounds(0,0,573,25);
		JLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel6.setText("Results of Query");
		JPanel3.add(JLabel6);
		JLabel6.setForeground(java.awt.Color.black);
		JLabel6.setBounds(239,5,94,15);
		OutputPanel.add(BorderLayout.CENTER, JTabbedPane2);
		JTabbedPane2.setFont(new Font("Dialog", Font.PLAIN, 12));
		JTabbedPane2.setBounds(0,25,573,448);
		TextOutputPanel.setLayout(new BorderLayout(0,0));
		JTabbedPane2.add(TextOutputPanel);
		TextOutputPanel.setBounds(2,27,568,418);
		TextOutputPanel.setVisible(false);
		TextOutputScrollPanel.setOpaque(true);
		TextOutputPanel.add(BorderLayout.CENTER, TextOutputScrollPanel);
		TextOutputScrollPanel.setBounds(0,0,568,400);
		OutputTextArea.setWrapStyleWord(true);
		OutputTextArea.setLineWrap(true);
		TextOutputScrollPanel.getViewport().add(OutputTextArea);
		OutputTextArea.setBounds(0,0,565,397);
		TextOutputScrollPanel1.setOpaque(true);
		TextOutputPanel.add(BorderLayout.SOUTH, TextOutputScrollPanel1);
		TextOutputScrollPanel1.setBounds(0,400,568,18);
		TextOutputScrollPanel1.setVisible(false);
		TextOutputScrollPanel1.getViewport().add(JTextArea1);
		JTextArea1.setBounds(0,0,565,15);
		
//		JTabbedPane2.add(XMLOutputScrollPanel);
        QueryOutputPanel.setLayout(new GridLayout(2,1));
        JTabbedPane2.add(QueryOutputPanel);
		QueryOutputPanel.setVisible(false);
		XMLOutputScrollPanel.setOpaque(true);
        QueryOutputPanel.add(XMLOutputScrollPanel);
        QueryOutputPanel.add(QueryTableScrollPane);
        
        
		HTMLOutputScrollPanel.setOpaque(true);
		JTabbedPane2.add(HTMLOutputScrollPanel);
		HTMLOutputScrollPanel.setBounds(2,27,568,418);
		HTMLOutputScrollPanel.setVisible(false);
		JEditorPane1.setEditable(false);
		HTMLOutputScrollPanel.getViewport().add(JEditorPane1);
		JEditorPane1.setBounds(0,0,565,415);
		JTabbedPane2.setSelectedComponent(TextOutputPanel);
		JTabbedPane2.setSelectedIndex(0);
		JTabbedPane2.setTitleAt(0,"Text");
		JTabbedPane2.setTitleAt(1,"XML");
		JTabbedPane2.setTitleAt(2,"HTML");
	// DataPanel is 4nd tab in primary layout
		DataPanel.setLayout(new BorderLayout(0,0));
		JTabbedPane1.add(DataPanel);
		DataPanel.setBounds(2,27,747,473);
		DataPanel.setVisible(false);
		
		//DataPanel Components
		DataPanelControls.setLayout(new GridBagLayout());
		DataPanel.add(BorderLayout.WEST,DataPanelControls);
		DataPanelControls.setBounds(0,0,175,440);
		DataPanelLabel1.setText("Data Viewer Controls");
		DataPanelControls.add(DataPanelLabel1,new com.symantec.itools.awt.GridBagConstraintsD(0,0,1,1,0.0,1.0,java.awt.GridBagConstraints.NORTH,java.awt.GridBagConstraints.NONE,new Insets(20,10,0,0),0,0));
		DataPanelLabel1.setForeground(java.awt.Color.black);
		DataPanelLabel1.setBounds(40,20,104,15);
		OpenDataFile.setText("Open Local Data File");
		DataPanelControls.add(OpenDataFile,new com.symantec.itools.awt.GridBagConstraintsD(0,1,1,1,0.0,0.5,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.HORIZONTAL,new Insets(0,10,0,10),0,0));
		OpenDataFile.setBounds(10,135,155,25);
		getFromSRB_Button.setText("Get Data from Server");
		DataPanelControls.add(getFromSRB_Button,new com.symantec.itools.awt.GridBagConstraintsD(0,2,1,1,0.0,0.5,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.NONE,new Insets(0,10,0,10),0,0));
		getFromSRB_Button.setBounds(11,200,153,25);
		sendToSRB_Button.setText("Send Data to Server");
		DataPanelControls.add(sendToSRB_Button,new com.symantec.itools.awt.GridBagConstraintsD(0,3,1,1,0.0,0.5,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.HORIZONTAL,new Insets(0,10,0,10),0,0));
		sendToSRB_Button.setBounds(10,265,155,25);
		TextToTableButton.setText("Text to Table");
		DataPanelControls.add(TextToTableButton,new com.symantec.itools.awt.GridBagConstraintsD(0,4,1,1,0.0,0.5,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.HORIZONTAL,new Insets(0,10,0,10),0,0));
		TextToTableButton.setBounds(10,330,155,25);
		TabeToXML.setText("Convert Table to XML");
		DataPanelControls.add(TabeToXML,new com.symantec.itools.awt.GridBagConstraintsD(0,5,1,1,0.0,0.5,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.HORIZONTAL,new Insets(0,10,0,10),0,0));
		TabeToXML.setBounds(10,395,155,25);
		DataPanelViewer.setLayout(new BorderLayout(0,0));
		DataPanel.add(BorderLayout.CENTER,DataPanelViewer);
		DataPanelViewer.setBounds(175,0,505,440);
		DataPanelViewer.add(BorderLayout.CENTER,DataViewerTabbedPane);
		DataViewerTabbedPane.setBounds(0,0,505,440);
		DataViewerTabbedPane.add(TextDataScrollPane);
		TextDataScrollPane.setBounds(2,27,500,410);
		TextDataScrollPane.getViewport().add(JTextAreaData);
		JTextArea1.setBounds(0,0,497,407);
		DataViewerTabbedPane.add(TableDataScrollPane);
		TableDataScrollPane.setBounds(2,27,500,410);
		TableDataScrollPane.getViewport().add(DataViewerTable);
		DataViewerTabbedPane.setTitleAt(0,"Text View");
		DataViewerTabbedPane.setTitleAt(1,"Table View");
		
		
		JTabbedPane1.setSelectedComponent(EditorPanel);
		JTabbedPane1.setSelectedIndex(1);
		JTabbedPane1.setTitleAt(0,"Introduction");
		JTabbedPane1.setTitleAt(1,"MetaData Editor");
		JTabbedPane1.setTitleAt(2,"Metadata Query");
		JTabbedPane1.setTitleAt(3,"Data Viewer");

		fileMenu.setText("File");
		fileMenu.setActionCommand("File");
		fileMenu.setMnemonic((int)'F');
		JMenuBar1.add(fileMenu);
		newItem.setText("New");
		newItem.setActionCommand("New");
		newItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.Event.CTRL_MASK));
		newItem.setMnemonic((int)'N');
		fileMenu.add(newItem);
		openItem.setText("Open...");
		openItem.setActionCommand("Open...");
		openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.Event.CTRL_MASK));
		openItem.setMnemonic((int)'O');
		fileMenu.add(openItem);
		saveItem.setText("Save");
		saveItem.setActionCommand("Save");
		saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.Event.CTRL_MASK));
		saveItem.setMnemonic((int)'S');
		fileMenu.add(saveItem);
		saveAsItem.setText("Save As...");
		saveAsItem.setActionCommand("Save As...");
		saveAsItem.setMnemonic((int)'A');
		fileMenu.add(saveAsItem);
		fileMenu.add(JSeparator1);
		XML2ServerItem.setText("Send XML to Server");
		XML2ServerItem.setActionCommand("Send XML to Server");
		fileMenu.add(XML2ServerItem);
		fileMenu.add(JSeparator3);
		exitItem.setText("Exit");
		exitItem.setActionCommand("Exit");
		exitItem.setMnemonic((int)'X');
		fileMenu.add(exitItem);
		editMenu.setText("Edit");
		editMenu.setActionCommand("Edit");
		editMenu.setMnemonic((int)'E');
		JMenuBar1.add(editMenu);
		cutItem.setText("Cut");
		cutItem.setActionCommand("Cut");
		cutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.Event.CTRL_MASK));
		cutItem.setMnemonic((int)'T');
		editMenu.add(cutItem);
		copyItem.setText("Copy");
		copyItem.setActionCommand("Copy");
		copyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.Event.CTRL_MASK));
		copyItem.setMnemonic((int)'C');
		editMenu.add(copyItem);
		pasteItem.setText("Paste");
		pasteItem.setActionCommand("Paste");
		pasteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.Event.CTRL_MASK));
		pasteItem.setMnemonic((int)'P');
		editMenu.add(pasteItem);
		helpMenu.setText("Help");
		helpMenu.setActionCommand("Help");
		helpMenu.setMnemonic((int)'H');
		JMenuBar1.add(helpMenu);
		aboutItem.setText("About...");
		aboutItem.setActionCommand("About...");
		aboutItem.setMnemonic((int)'A');
		helpMenu.add(aboutItem);
		JMenu1.setText("ShortCuts");
		JMenu1.setActionCommand("ShortCuts");
		JMenuBar1.add(JMenu1);
		JMenuItem1.setText("Expand Tree");
		JMenuItem1.setActionCommand("Expand Tree");
		JMenu1.add(JMenuItem1);
		JMenuItem2.setText("Collapse Tree");
		JMenuItem2.setActionCommand("Collapse Tree");
		JMenu1.add(JMenuItem2);
		XMLText.setText("Load XML Text");
		XMLText.setActionCommand("Load XML Text");
		JMenu1.add(XMLText);
		GrammarCheckBoxMenuItem.setText("Show Grammar as Schema");
		GrammarCheckBoxMenuItem.setActionCommand("Show Grammar as Schema");
		JMenu1.add(GrammarCheckBoxMenuItem);
		ValidateCheckBoxMenuItem.setText("Validate Document");
		ValidateCheckBoxMenuItem.setActionCommand("Validate Document");
		JMenu1.add(ValidateCheckBoxMenuItem);
		LaunchMenu.setText("Launch");
		LaunchMenu.setActionCommand("Launch");
		JMenuBar1.add(LaunchMenu);
		JMenuItem3.setText("Add Menu Item");
		JMenuItem3.setActionCommand("Add Menu Item");
		LaunchMenu.add(JMenuItem3);
		LaunchMenu.add(JSeparator2);
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		openItem.addActionListener(lSymAction);
		saveItem.addActionListener(lSymAction);
		exitItem.addActionListener(lSymAction);
		aboutItem.addActionListener(lSymAction);
		openButton.addActionListener(lSymAction);
		saveButton.addActionListener(lSymAction);
		aboutButton.addActionListener(lSymAction);
		GrammarCheckBoxMenuItem.addActionListener(lSymAction);
		ValidateCheckBoxMenuItem.addActionListener(lSymAction);
		XMLText.addActionListener(lSymAction);
		JMenuItem3.addActionListener(lSymAction);
		SubmitButton.addActionListener(lSymAction);
		OpenFileButton.addActionListener(lSymAction);
		XML2ServerItem.addActionListener(lSymAction);
		TextToTableButton.addActionListener(lSymAction);
		//}}
		OutputChoice.setBorder(lineBorder1);
		OutputChoice1.setBorder(lineBorder1);
		
		
//      Example of loading icon as resource - DFH 
		ImageIcon xxx = new ImageIcon(getClass().getResource("new.gif"));
		newButton.setIcon(xxx);
		newItem.setIcon(xxx);
		xxx = new ImageIcon(getClass().getResource("open.gif"));
		openButton.setIcon(xxx);
		openItem.setIcon(xxx);
		xxx = new ImageIcon(getClass().getResource("save.gif"));
		saveButton.setIcon(xxx);
		saveItem.setIcon(xxx);
		xxx = new ImageIcon(getClass().getResource("cut.gif"));
		cutButton.setIcon(xxx);
		cutItem.setIcon(xxx);
		xxx = new ImageIcon(getClass().getResource("copy.gif"));
		copyButton.setIcon(xxx);
		copyItem.setIcon(xxx);
		xxx = new ImageIcon(getClass().getResource("paste.gif"));
		pasteButton.setIcon(xxx);
		pasteItem.setIcon(xxx);
		xxx = new ImageIcon(getClass().getResource("about.gif"));
		aboutButton.setIcon(xxx);
		aboutItem.setIcon(xxx);
 		xxx = new ImageIcon(getClass().getResource("nsf_logo.gif"));
		NSFLabel.setIcon(xxx);
 		xxx = new ImageIcon(getClass().getResource("NCEASlogo.gif"));
		NCEASLabel.setIcon(xxx);
		
		
		// Initialize Launch Menu
		Vector launch = MyAction.getActionList();
		 for (Enumeration e = launch.elements() ; e.hasMoreElements() ;) {
         LaunchMenu.add((MyAction)(e.nextElement())); 
         }

		
		JSplitPane querySplitPanel = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, true, InputPanel, OutputPanel);
		QueryPanel.remove(InputPanel);
		QueryPanel.remove(OutputPanel);
		QueryPanel.add(BorderLayout.CENTER,querySplitPanel);
//		querySplitPanel.setDividerLocation(200);
// Get the configuration file information
    try {
      options = (PropertyResourceBundle)PropertyResourceBundle.getBundle("client");
      xmlcatalogfile = (String)options.handleGetObject("xmlcatalogfile");
      MetaCatServletURL = (String)options.handleGetObject("MetaCatServletURL");
    }
    catch (Exception e) {System.out.println("Could not locate properties file!");}
		
		editpanel = new TreeView(xmlcatalogfile);
		editpanel.setVisible(true);
//		editpanel.setSize(700,500);
		EditorPanel.add(BorderLayout.CENTER,editpanel);
		
        m_tree = new DOMTree();
        m_tree.getSelectionModel().setSelectionMode
            (TreeSelectionModel.SINGLE_TREE_SELECTION);

        m_tree.setRowHeight(18);
        m_tree.setFont(new Font("dialog", Font.PLAIN, 12));
        m_tree.setVisible(true);
	 	XMLOutputScrollPanel.getViewport().add(m_tree);

	}

    /**
     * Creates a new instance of JFrame1 with the given title.
     * @param sTitle the title for the new frame.
     * @see #JFrame1()
     */
	public TopFrame(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	/**
	 * The entry point for this application.
	 * Sets the Look and Feel to the System Look and Feel.
	 * Creates a new JFrame1 and makes it visible.
	 */
	static public void main(String args[])
	{
		try {
		    // Add the following code if you want the Look and Feel
		    // to be set to the Look and Feel of the native system.
		    /*
		    try {
		        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		    } 
		    catch (Exception e) { 
		    }
		    */

			//Create a new instance of our application's frame, and make it visible.
			(new TopFrame()).setVisible(true);
		} 
		catch (Throwable t) {
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}

    /**
     * Notifies this component that it has been added to a container
     * This method should be called by <code>Container.add</code>, and 
     * not by user code directly.
     * Overridden here to adjust the size of the frame if needed.
     * @see java.awt.Container#removeNotify
     */
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();
		
		super.addNotify();
		
		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;
		
		// Adjust size of frame according to the insets and menu bar
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
		    menuBarHeight = menuBar.getPreferredSize().height;
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.FileDialog saveFileDialog = new java.awt.FileDialog(this);
	java.awt.FileDialog openFileDialog = new java.awt.FileDialog(this);
	javax.swing.JPanel JPanel2 = new javax.swing.JPanel();
	javax.swing.JToolBar JToolBar1 = new javax.swing.JToolBar();
	javax.swing.JButton newButton = new javax.swing.JButton();
	javax.swing.JButton openButton = new javax.swing.JButton();
	javax.swing.JButton saveButton = new javax.swing.JButton();
	javax.swing.JButton cutButton = new javax.swing.JButton();
	javax.swing.JButton copyButton = new javax.swing.JButton();
	javax.swing.JButton pasteButton = new javax.swing.JButton();
	javax.swing.JButton aboutButton = new javax.swing.JButton();
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JTabbedPane JTabbedPane1 = new javax.swing.JTabbedPane();
	javax.swing.JPanel IntroPanel = new javax.swing.JPanel();
	javax.swing.JLabel NSFLabel = new javax.swing.JLabel();
	javax.swing.JLabel NCEASLabel = new javax.swing.JLabel();
	javax.swing.JPanel EditorPanel = new javax.swing.JPanel();
	javax.swing.JPanel QueryPanel = new javax.swing.JPanel();
	javax.swing.JPanel InputPanel = new javax.swing.JPanel();
	javax.swing.JPanel LabelPanel = new javax.swing.JPanel();
	javax.swing.JLabel QueryLabel = new javax.swing.JLabel();
	javax.swing.JTabbedPane TabbedQueryPane = new javax.swing.JTabbedPane();
	javax.swing.JPanel TextQueryPanel = new javax.swing.JPanel();
	javax.swing.JPanel JPanelTextSearch = new javax.swing.JPanel();
	javax.swing.JTextField TextField1 = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	com.symantec.itools.javax.swing.JButtonGroupPanel AndOrGroupPanel = new com.symantec.itools.javax.swing.JButtonGroupPanel();
	javax.swing.JRadioButton AndRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton ORRadioButton = new javax.swing.JRadioButton();
	javax.swing.JTextField TextField2 = new javax.swing.JTextField();
	javax.swing.JLabel JLabel8 = new javax.swing.JLabel();
	com.symantec.itools.javax.swing.JButtonGroupPanel OutputChoice = new com.symantec.itools.javax.swing.JButtonGroupPanel();
	javax.swing.JRadioButton HTMLOutput = new javax.swing.JRadioButton();
	javax.swing.JRadioButton XMLOutput = new javax.swing.JRadioButton();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JPanel TitleQueryPanel = new javax.swing.JPanel();
	javax.swing.JPanel JPanel4 = new javax.swing.JPanel();
	javax.swing.JTextField IDTextField = new javax.swing.JTextField();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	com.symantec.itools.javax.swing.JButtonGroupPanel OutputChoice1 = new com.symantec.itools.javax.swing.JButtonGroupPanel();
	javax.swing.JRadioButton HTMLOutput1 = new javax.swing.JRadioButton();
	javax.swing.JRadioButton XMLOutput1 = new javax.swing.JRadioButton();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JPanel StructuredQueryPanel = new javax.swing.JPanel();
	javax.swing.JPanel JPanel6 = new javax.swing.JPanel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JPanel LocalQueryPanel = new javax.swing.JPanel();
	javax.swing.JPanel JPanel5 = new javax.swing.JPanel();
	javax.swing.JButton OpenFileButton = new javax.swing.JButton();
	javax.swing.JTextField xpathTextField = new javax.swing.JTextField();
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
	javax.swing.JPanel ParamPanel = new javax.swing.JPanel();
	javax.swing.JPanel SubmitPanel = new javax.swing.JPanel();
	javax.swing.JButton SubmitButton = new javax.swing.JButton();
	javax.swing.JPanel OutputPanel = new javax.swing.JPanel();
	javax.swing.JPanel JPanel3 = new javax.swing.JPanel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JTabbedPane JTabbedPane2 = new javax.swing.JTabbedPane();
	javax.swing.JPanel TextOutputPanel = new javax.swing.JPanel();
	javax.swing.JScrollPane TextOutputScrollPanel = new javax.swing.JScrollPane();
	javax.swing.JTextArea OutputTextArea = new javax.swing.JTextArea();
	javax.swing.JScrollPane TextOutputScrollPanel1 = new javax.swing.JScrollPane();
	javax.swing.JTextArea JTextArea1 = new javax.swing.JTextArea();
	javax.swing.JScrollPane XMLOutputScrollPanel = new javax.swing.JScrollPane();
	javax.swing.JScrollPane HTMLOutputScrollPanel = new javax.swing.JScrollPane();
	javax.swing.JEditorPane JEditorPane1 = new javax.swing.JEditorPane();
	javax.swing.JPanel DataPanel = new javax.swing.JPanel();
	javax.swing.JMenuBar JMenuBar1 = new javax.swing.JMenuBar();
	javax.swing.JMenu fileMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem newItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem openItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem saveItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem saveAsItem = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator1 = new javax.swing.JSeparator();
	javax.swing.JMenuItem XML2ServerItem = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator3 = new javax.swing.JSeparator();
	javax.swing.JMenuItem exitItem = new javax.swing.JMenuItem();
	javax.swing.JMenu editMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem cutItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem copyItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem pasteItem = new javax.swing.JMenuItem();
	javax.swing.JMenu helpMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem aboutItem = new javax.swing.JMenuItem();
	javax.swing.JMenu JMenu1 = new javax.swing.JMenu();
	javax.swing.JMenuItem JMenuItem1 = new javax.swing.JMenuItem();
	javax.swing.JMenuItem JMenuItem2 = new javax.swing.JMenuItem();
	javax.swing.JMenuItem XMLText = new javax.swing.JMenuItem();
	javax.swing.JCheckBoxMenuItem GrammarCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JCheckBoxMenuItem ValidateCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JMenu LaunchMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem JMenuItem3 = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator2 = new javax.swing.JSeparator();

	javax.swing.border.LineBorder lineBorder1 = new javax.swing.border.LineBorder(Color.white);
	javax.swing.JToolBar.Separator JTBSeparator1 = new javax.swing.JToolBar.Separator();
	javax.swing.JToolBar.Separator JTBSeparator2 = new javax.swing.JToolBar.Separator();
	//}}
	javax.swing.JPanel DataPanelControls = new javax.swing.JPanel();
	javax.swing.JLabel DataPanelLabel1 = new javax.swing.JLabel();
	javax.swing.JButton OpenDataFile = new javax.swing.JButton();
	javax.swing.JButton getFromSRB_Button = new javax.swing.JButton();
	javax.swing.JButton sendToSRB_Button = new javax.swing.JButton();
	javax.swing.JButton TextToTableButton = new javax.swing.JButton();
	javax.swing.JButton TabeToXML = new javax.swing.JButton();
	javax.swing.JPanel DataPanelViewer = new javax.swing.JPanel();
	javax.swing.JTabbedPane DataViewerTabbedPane = new javax.swing.JTabbedPane();
	javax.swing.JScrollPane TextDataScrollPane = new javax.swing.JScrollPane();
	javax.swing.JTextArea JTextAreaData = new javax.swing.JTextArea();
	javax.swing.JScrollPane TableDataScrollPane = new javax.swing.JScrollPane();
	javax.swing.JTable DataViewerTable = new javax.swing.JTable();
	
	javax.swing.JPanel QueryOutputPanel = new javax.swing.JPanel();
	javax.swing.JScrollPane QueryTableScrollPane = new javax.swing.JScrollPane();
	
	//{{DECLARE_MENUS
	//}}

	void exitApplication()
	{
		try {
	    	// Beep
	    	Toolkit.getDefaultToolkit().beep();
	    	// Show a confirmation dialog
	    	int reply = JOptionPane.showConfirmDialog(this, 
	    	                                          "Do you really want to exit?", 
	    	                                          "NCEAS XML Client - Exit" , 
	    	                                          JOptionPane.YES_NO_OPTION, 
	    	                                          JOptionPane.QUESTION_MESSAGE);
			// If the confirmation was affirmative, handle exiting.
			if (reply == JOptionPane.YES_OPTION)
			{
			    MyAction.saveActionList();  // write serialization file for Launch menu
		    	this.setVisible(false);    // hide the Frame
		    	this.dispose();            // free the system resources
		    	System.exit(0);            // close the application
			}
		} catch (Exception e) {
		}
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == TopFrame.this)
				TopFrame_windowClosing(event);
		}
	}

	void TopFrame_windowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		TopFrame_windowClosing_Interaction1(event);
	}

	void TopFrame_windowClosing_Interaction1(java.awt.event.WindowEvent event) {
		try {
			this.exitApplication();
		} catch (Exception e) {
		}
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == openItem)
				openItem_actionPerformed(event);
			else if (object == saveItem)
				saveItem_actionPerformed(event);
			else if (object == exitItem)
				exitItem_actionPerformed(event);
			else if (object == aboutItem)
				aboutItem_actionPerformed(event);
			else if (object == openButton)
				openButton_actionPerformed(event);
			else if (object == saveButton)
				saveButton_actionPerformed(event);
			else if (object == aboutButton)
				aboutButton_actionPerformed(event);
			else if (object == GrammarCheckBoxMenuItem)
				GrammarCheckBoxMenuItem_actionPerformed(event);
			else if (object == ValidateCheckBoxMenuItem)
				ValidateCheckBoxMenuItem_actionPerformed(event);
			else if (object == XMLText)
				XMLText_actionPerformed(event);
			else if (object == JMenuItem3)
				JMenuItem3_actionPerformed(event);
			else if (object == SubmitButton)
				SubmitButton_actionPerformed(event);
			else if (object == OpenFileButton)
				OpenFileButton_actionPerformed(event);
			else if (object == XML2ServerItem)
				XML2ServerItem_actionPerformed(event);
		    else if (object == TextToTableButton)
		        TextToTableButton_actionPerformed(event);
		}
	}

	void openItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		openItem_actionPerformed_Interaction1(event);
	}

	void openItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// Show the FileDialog
			openFileDialog.setVisible(true);
		} catch (Exception e) {
		}
		String file = openFileDialog.getFile();
		if (file!=null) {
		file = openFileDialog.getDirectory() + file;
		editpanel.refreshUI(file);
		editpanel.fname=file;
		}
	}

	void saveItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		saveItem_actionPerformed_Interaction1(event);
	}

	void saveItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// saveFileDialog Show the FileDialog
			if(editpanel.fname!=null) saveFileDialog.setFile(editpanel.fname);
			saveFileDialog.setVisible(true);
		} catch (Exception e) { }
		String file = saveFileDialog.getFile();
		if (file!=null) {
		    file = openFileDialog.getDirectory() + file;
		  try{
		    File fileout = new File(file);
		    FileWriter fout = new FileWriter(fileout);
		    String xmlstring = editpanel.sourceText.getText();
		    fout.write(xmlstring,0,xmlstring.length());
		    fout.flush();
		    fout.close();
		}
		catch(Exception ee) {}
		}
		
	}
	
	void TextToTableButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		DataViewerTable.setModel(new asciiTableModel(JTextAreaData.getText()));	    
	}

	void exitItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitItem_actionPerformed_Interaction1(event);
	}

	void exitItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			this.exitApplication();
		} catch (Exception e) {
		}
	}

	void aboutItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutItem_actionPerformed_Interaction1(event);
	}

	void aboutItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				JAboutDialog JAboutDialog1 = new JAboutDialog(this);
				JAboutDialog1.setModal(true);
				JAboutDialog1.show();
			}
		} catch (Exception e) {
		}
	}

	void openButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		openButton_actionPerformed_Interaction1(event);
	}

	void openButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// openFileDialog Show the FileDialog
			openFileDialog.setVisible(true);
		} catch (Exception e) {
		}
		String file = openFileDialog.getFile();
		if (file!=null) {
		file = openFileDialog.getDirectory() + file;
		editpanel.refreshUI(file);
		editpanel.fname=file;
		}
	}

	void saveButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		saveButton_actionPerformed_Interaction1(event);
	}

	void saveButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// saveFileDialog Show the FileDialog
			if(editpanel.fname!=null) saveFileDialog.setFile(editpanel.fname);
			saveFileDialog.setVisible(true);
		} catch (Exception e) { }
		String file = saveFileDialog.getFile();
		if (file!=null) {
		    file = openFileDialog.getDirectory() + file;
		  try{
		    File fileout = new File(file);
		    FileWriter fout = new FileWriter(fileout);
		    String xmlstring = editpanel.sourceText.getText();
		    fout.write(xmlstring,0,xmlstring.length());
		    fout.flush();
		    fout.close();
		}
		catch(Exception ee) {}
		}
	}

	void aboutButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutButton_actionPerformed_Interaction1(event);
	}

	void aboutButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				JAboutDialog JAboutDialog1 = new JAboutDialog(this);
				JAboutDialog1.setModal(true);
				JAboutDialog1.show();
			}
		} catch (Exception e) {
		}
	}

	void GrammarCheckBoxMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (GrammarCheckBoxMenuItem.isSelected()) {
		    editpanel.schemaItem=true;
		}
		else {editpanel.schemaItem=false;}
//		editpanel.refreshUI(editpanel.fname);	 
		editpanel.refreshXML(editpanel.sourceText.getText());	 
	}

	void ValidateCheckBoxMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (ValidateCheckBoxMenuItem.isSelected()) {
		    editpanel.validationItem=true;
		}
		else {editpanel.validationItem=false;}
		editpanel.refreshXML(editpanel.sourceText.getText());
			 
	}

	void XMLText_actionPerformed(java.awt.event.ActionEvent event)
	{
		editpanel.refreshXML(editpanel.sourceText.getText());
			 
	}
	
	
	
	

	void JMenuItem3_actionPerformed(java.awt.event.ActionEvent event)
	{
		NewMenuItemDialog MenuItemDialog1 = new NewMenuItemDialog(this, LaunchMenu);
		MenuItemDialog1.setModal(true);
		MenuItemDialog1.show();
		
			 
	}



	void SubmitButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (TabbedQueryPane.getSelectedIndex()==0) {  //Text query)
		    String qtext1 = TextField1.getText();
	//	    String qtext2 = TextField2.getText();
	        String respType = "xml";
	        if (HTMLOutput.isSelected()) respType = "html";
	    try {
		    URL url = new URL(MetaCatServletURL);
		    HttpMessage msg = new HttpMessage(url);
		    Properties prop = new Properties();
		    prop.put("action","query");
		    prop.put("query",qtext1);
		    prop.put("qformat",respType);
		    
		    
		    InputStream in = msg.sendPostMessage(prop);
		    String message_sent = MetaCatServletURL+msg.getArgString();
		    
		    OutputTextArea.setText(msg.contype+"\n");
		    StringBuffer txt = new StringBuffer();
		    int x;
		    try {
		    while((x=in.read())!=-1) {
		        txt.append((char)x);
		    }
		    }
		    catch (Exception e) {}
		    String txt1 = txt.toString();
		    OutputTextArea.append(txt1);
		    if((msg.contype).equals("text/html")) JEditorPane1.setPage(new URL(message_sent));
		    if((msg.contype).equals("text/xml")) 
		    {
		        refreshXML(txt1) ; // XML type (change equals to starts with?)
		        Document document = editpanel.parser.getDocument();
                Element nnn = document.getDocumentElement();
                XMLTable xt = new XMLTable(nnn);
                QueryTableScrollPane.getViewport().add(xt.createTable()); 
		        
		    }
		    in.close();
		}
		catch (Exception e) {
		    e.printStackTrace();
		}
	
		}

			 
		if (TabbedQueryPane.getSelectedIndex()==1) {  //Title ID query)
		    String qtext1 = IDTextField.getText();
	        String respType = "xml";
	        if (HTMLOutput1.isSelected()) respType = "html";
	    try {
		    URL url = new URL(MetaCatServletURL);
		    HttpMessage msg = new HttpMessage(url);
		    Properties prop = new Properties();
		    prop.put("action","getdocument");
		    prop.put("docid",qtext1);
		    prop.put("qformat",respType);
		    
		    
		    InputStream in = msg.sendPostMessage(prop);
		    String message_sent = MetaCatServletURL+msg.getArgString();
		    
		    OutputTextArea.setText(msg.contype+"\n");
		    StringBuffer txt = new StringBuffer();
		    int x;
		    try {
		    while((x=in.read())!=-1) {
		        txt.append((char)x);
		    }
		    }
		    catch (Exception e) {}
		    String txt1 = txt.toString();
		    OutputTextArea.append(txt1);
		    if((msg.contype).equals("text/html")) JEditorPane1.setPage(new URL(message_sent));
		    if((msg.contype).equals("text/xml")) refreshXML(txt1) ; // XML type (change equals to starts with?)
		    in.close();
		}
		catch (Exception e) {
		    e.printStackTrace();
		}
	
		}
		
		
		if (TabbedQueryPane.getSelectedIndex()==3) {  //Local xpath query)
            Document document = editpanel.parser.getDocument();
		    
		    if (document!=null) {
                Node root = editpanel.parser.getDocument().getDocumentElement();
                String xpath = xpathTextField.getText();
                NodeList nl = null;
                 try
                {
                    // Use the simple XPath API to select a node.
                    nl = XPathAPI.selectNodeList(root, xpath);
        
                    // Use the FormatterToXML class right not instead of 
                    // the Xerces Serializer classes, because I'm not sure 
                    // yet how to make them handle arbitrary nodes.
                    StringWriter sw = new StringWriter();
                    FormatterToXML fl = new FormatterToXML(sw);
                    TreeWalker tw = new TreeWalker(fl);
                    int n = nl.getLength();
                    if (n==0) OutputTextArea.setText(" No nodes matching xpath were found!");
                    for(int i = 0; i < n; i++)
                    {
                    tw.traverse(nl.item(i));
                    // We have to do both a flush and a flushWriter here, 
                    // because the FormatterToXML rightly does not flush 
                    // until it get's an endDocument, which usually will 
                    // not happen here.
                    fl.flush();
                    fl.flushWriter();
                    OutputTextArea.setText(sw.toString());
                    }
                   
                }
                catch (Exception e2)
                {
                    System.err.println("selectNodeList threw: " + e2.toString() + " perhaps your xpath didn't select any nodes");
                    e2.printStackTrace();
                    return;
                }
            }
		}	 
			 
	}
	
    /**
     *
     * refreshXML builds a tree for displaying an XML doc
     * XML is assumed to be IN the input string
    */
    void refreshXML(String xmldoc) {
        if (xmldoc!=""){
        try {
            //
            // Reset the Error Storage and handling
            //
     
            editpanel.ef.resetErrors();
            editpanel.parser.setErrorHandler(editpanel.ef);
            editpanel.parser.setFeature("http://apache.org/xml/features/dom/defer-node-expansion", false); // otherwise parser.getCurrentNode() == null
            editpanel.parser.setFeature("http://apache.org/xml/features/continue-after-fatal-error", true);
            editpanel.parser.setFeature("http://apache.org/xml/features/allow-java-encodings", true); 
            
            InputSource is = new InputSource(new StringReader(xmldoc));
            editpanel.parser.parse(is);
            Document document = editpanel.parser.getDocument();
            if (document!=null) {
                editpanel.m_tree.setDocument(document);
                m_tree.setDocument(document);
            }
     //       XMLPanels xp = new XMLPanels(document);
     //       TestingOutputScrollPanel.getViewport().add(xp.topPanel);
            
//            Element nnn = document.getDocumentElement();
//            XMLTable xt = new XMLTable(nnn);
//            TestingOutputScrollPanel.getViewport().add(xt.createTable());
        }
        catch (Exception e) {}
        }
            
    }	
	
	
	

	void OpenFileButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		try {
			// openFileDialog Show the FileDialog
			openFileDialog.setVisible(true);
		} catch (Exception e) {
		}
		String file = openFileDialog.getFile();
		file = openFileDialog.getDirectory() + file;
		editpanel.readXMLFile(file, OutputTextArea);

		refreshXML(OutputTextArea.getText());	 
	}
			 
	

	void XML2ServerItem_actionPerformed(java.awt.event.ActionEvent event)
	{
	    try {
		    URL url = new URL(MetaCatServletURL);
		    HttpMessage msg = new HttpMessage(url);
		    Properties prop = new Properties();
		    prop.put("action","putdocument");
		    prop.put("doctext",editpanel.sourceText.getText());
		    
		    
		    InputStream in = msg.sendPostMessage(prop);
		    
		    OutputTextArea.setText(msg.contype+"\n");
		    StringBuffer txt = new StringBuffer();
		    int x;
		    try {
		    while((x=in.read())!=-1) {
		        txt.append((char)x);
		    }
		    }
		    catch (Exception e) {}
		    String txt1 = txt.toString();
//   What do I need to do to acknowlede that XML text was sent??? Does servlet respond?
/*		    OutputTextArea.append(txt1);
		    if((msg.contype).equals("text/html")) JEditorPane1.setPage(MetaCatServletURL);
		    if((msg.contype).equals("text/xml")) refreshXML(txt1) ; // XML type (change equals to starts with?)
*/		    in.close();
		}
		catch (Exception e) {
		    e.printStackTrace();
		}
			 
	}
}
