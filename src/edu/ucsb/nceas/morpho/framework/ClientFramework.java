/**
 *       Name: ClientFramework.java
 *    Purpose: A Class that is the top frame for an XML_Query sample
 *             application (searchs local collection of XML files
 *  Copyright: 2000 Regents of the University of California and the
 *              National Center for Ecological Analysis and Synthesis
 *    Authors: Dan Higgins, Matt Jones
 *    Release: @release@
 *
 *   '$Author: jones $'
 *     '$Date: 2001-04-18 01:56:02 $'
 * '$Revision: 1.31.2.6 $'
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */


package edu.ucsb.nceas.dtclient;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import com.symantec.itools.javax.swing.JToolBarSeparator;
import com.symantec.itools.javax.swing.JButtonGroupPanel;
import com.symantec.itools.javax.swing.models.StringListModel;
import com.symantec.itools.javax.swing.models.StringTreeModel;

import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import java.io.*;
import java.util.*;
import java.net.URL;
import java.lang.reflect.*;
import java.lang.ClassCastException;
import com.symantec.itools.javax.swing.borders.LineBorder;

/**
 * A basic JFC 1.1 based application.
 */
public class ClientFramework extends javax.swing.JFrame 
                             implements PluginInterface
{
  /** Constant to indicate a spearator should precede an action */
  public static String SEPARATOR_PRECEDING = "TRUE";

  // following static block will reset the mdehome config variable to the
  // current working dir if it is currently set to 'settocwd'
  // to be used when first installed
/*
  static
  {
    try
    {
      Properties mdeprops = new Properties();
      FileInputStream in = new FileInputStream("mde.cfg");
        mdeprops.load(in);
        in.close();
      String mdehome = (String) mdeprops.get("mdehome");
      if (mdehome.equals("settocwd"))
      {
	String cwd = (String) System.getProperty("user.dir");
	mdeprops.put("mdehome", cwd);
	FileOutputStream out = new FileOutputStream("mde.cfg");
	mdeprops.save(out, "--set mdehome=settocwd to set to " +
                      "current directory--");
	out.close();
      }
    }
    catch(Exception e)
    {
    }
  }
*/

  String userName = "public";
  String passWord = "none";
  // redirects standard out and err streams
  static boolean log_file = false;
  String xmlcatalogfile = null;
  String MetaCatServletURL = null;
  ConfigXML config;
  boolean connected = false;
  edu.ucsb.nceas.querybean.LocalQuery lq = null;
  Hashtable menuList = null;
  Action[] fileMenuActions = null;
  Action[] editMenuActions = null;
  Action[] helpMenuActions = null;
  Action[] containerToolbarActions = null;

  // String[] searchmode = {"contains","contains-not","is",
  //                        "is-not","starts-with","ends-with"};
  JTable table;

  public ClientFramework()
  {
    // Create the list of menus for use by the framework and plugins
    menuList = new Hashtable();

/*
    try
    {
      // Example of loading icon as resource - DFH 
      ImageIcon xxx = new ImageIcon(getClass().getResource("new.gif"));
      newButton.setIcon(xxx);
      newItem.setIcon(xxx);
      xxx = new ImageIcon(getClass().getResource("open.gif"));
      openButton.setIcon(xxx);
      openItem.setIcon(xxx);
      xxx = new ImageIcon(getClass().getResource("save.gif"));
      saveButton.setIcon(xxx);
      saveItem.setIcon(xxx);
      xxx = new ImageIcon(getClass().getResource("saveserver.gif"));
      saveserverButton.setIcon(xxx);
      xxx = new ImageIcon(getClass().getResource("export.gif"));
      exportButton.setIcon(xxx);
      xxx = new ImageIcon(getClass().getResource("datafiles.gif"));
      dataPict.setIcon(xxx);
    
    } catch(Exception e)
    {
    }
*/
    // This code is automatically generated by Visual Cafe when you add
    // components to the visual environment. It instantiates and initializes
    // the components. To modify the code, only use code syntax that matches
    // what Visual Cafe can generate, or Visual Cafe may be unable to back
    // parse your Java file into its visual environment.
    //{{INIT_CONTROLS
    setJMenuBar(JMenuBar1);
    setTitle("Morpho - Data Management for Ecologists");
    setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
    getContentPane().setLayout(new BorderLayout(0, 0));
    setSize(775, 550);
    setVisible(false);

    saveFileDialog.setMode(FileDialog.SAVE);
    saveFileDialog.setTitle("Save");
    openFileDialog.setMode(FileDialog.LOAD);
    openFileDialog.setTitle("Open");
    ToolBarPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
    getContentPane().add(BorderLayout.NORTH, ToolBarPanel);
    ToolBarPanel.setBounds(0, 0, 744, 36);
    JToolBar1.setAlignmentY(0.222222F);
    ToolBarPanel.add(JToolBar1);
    JToolBar1.setBounds(0, 0, 834, 36);

    ContentPanel.setLayout(new BorderLayout(0, 0));
    getContentPane().add(BorderLayout.CENTER, ContentPanel);
    ContentPanel.setBounds(0, 0, 0, 0);
    JTabbedPane1.setToolTipText("Select tab of interest");
    ContentPanel.add(BorderLayout.CENTER, JTabbedPane1);
    JTabbedPane1.setBounds(0, 0, 0, 0);

    //}}

    //{{INIT_MENUS
    //}}

    //{{REGISTER_LISTENERS
    SymWindow aSymWindow = new SymWindow();
    this.addWindowListener(aSymWindow);
    SymAction lSymAction = new SymAction();

    //}}

    // Get the configuration file information
    try
    {
      config = new ConfigXML("config.xml");
      String local_dtd_directory = config.get("local_dtd_directory", 0);
      xmlcatalogfile = local_dtd_directory + "/catalog";
      MetaCatServletURL = config.get("MetaCatServletURL", 0);
    }
    catch(Exception e)
    {
      System.out.println("Could not locate properties file!");
    }

    // Set up the container's menus and toolbars
    initializeActions();
    loadPluginMenusAndToolbars(this);

    // Load all of the plugins, their menus, and toolbars
    loadPlugins();

    JTabbedPane1_stateChanged(null);
    queryBean1.setEditor(mdeBean1);
    queryBean1.setTabbedPane(JTabbedPane1);

  }

  /**
   * Load all of the plugins specified in the configuration file. The plugins
   * are classes that implement the PluginInterface interface.
   */
  private void loadPlugins()
  {
    // Get the list of plugins to load from the config file
    Vector plugins = config.get("plugin");

    // Dynamically load the plugins and their associated menus and toolbars
    try
    {
      for (Enumeration q = plugins.elements(); q.hasMoreElements();)
      {
        // Start by creating the new bean plugin
	PluginInterface plugin = (PluginInterface)
	                createObject((String) (q.nextElement()));

	// Create a panel to contain the plugin
	JPanel pluginPanel = new JPanel();
	pluginPanel.setLayout(new BorderLayout(0, 0));
	JTabbedPane1.add(pluginPanel);
	pluginPanel.setVisible(false);
	pluginPanel.add(BorderLayout.CENTER, (Container) plugin);

        // Allow the plugin to add menus and toolbar items
        loadPluginMenusAndToolbars(plugin);
      }
    }
    catch(ClassCastException cce)
    {
      System.err.println("Error loading plugin: wrong class!");
    }
  }

  /**
   * Load the menus and toolboxes for a particular plugin
   */
  private void loadPluginMenusAndToolbars(PluginInterface plugin)
  {
	// Get the list of menus from the plugin components
        String menus[] = plugin.registerMenus();

	// Loop through the menus and create them
        for (int i=0; i < menus.length; i++) {
          String currentMenuName = menus[i];

          JMenu currentMenu = null;
	  // Check if the menu exists already here
          if (menuList.containsKey(currentMenuName)) {
            currentMenu = (JMenu)menuList.get(currentMenuName);
          } else {
            currentMenu = new JMenu(); 
            currentMenu.setText(currentMenuName);
            currentMenu.setActionCommand(currentMenuName);
	    //currentMenu.setMnemonic((int)'H');
            JMenuBar1.add(currentMenu);
            menuList.put(currentMenuName, currentMenu);
          }

	 // Get the menu items (Actions) and add them to the menus
	 Action menuActions[] = 
	 plugin.registerMenuActions(currentMenuName);
         if (menuActions != null) {
	   for (int j=0; j < menuActions.length; j++) {
	     Action currentAction = menuActions[j];
             String hasDefaultSep = 
                    (String)currentAction.getValue(Action.DEFAULT);
             if (currentMenuName.equals("File")) {
	       // Insert File menu items above the "Exit" item and separator
               int pos = currentMenu.getMenuComponentCount() - 2;
               if (pos < 0) {
                 pos = 0;
               }
               if (hasDefaultSep != null &&
                   hasDefaultSep.equals(SEPARATOR_PRECEDING)) {
                 currentMenu.insertSeparator(pos++);
               }
               currentMenu.insert(currentAction, pos);
             } else {
	       // Append everything else at the bottom of the menu
               if (hasDefaultSep != null &&
                   hasDefaultSep.equals(SEPARATOR_PRECEDING)) {
                 currentMenu.addSeparator();
               }
               currentMenu.add(currentAction);
             }
           }
         }
       }

       // Get the toolbar Actions and add them to the toolbar
       Action toolbarActions[] = plugin.registerToolbarActions();
       if (toolbarActions != null) {
         for (int j=0; j < toolbarActions.length; j++) {
           Action currentAction = toolbarActions[j];
           JToolBar1.add(currentAction);
         }
      }
      // Set the tab title (should get dynamically from the client.properties
      //JTabbedPane1.setTitleAt(2, "Data Viewer");
      //JTabbedPane1.setTitleAt(2, "Demo Editor");
  }

  /**
   * Creates a new instance of JFrame1 with the given title.
   * @param sTitle the title for the new frame.
   * @see #JFrame1()
   */
  public ClientFramework(String sTitle)
  {
    this();
    setTitle(sTitle);
  }

  /**
   * This method is called on component initialization to generate a list
   * of the names of the menus, in display order, that the component wants
   * added to the framework.  If a menu already exists (from another component
   * or the framework itself), the order will be determined by the earlier
   * registration of the menu.
   */
  public String[] registerMenus() {
    String listOfMenus[] = new String[4];
    listOfMenus[0] = "File";
    listOfMenus[1] = "Edit";
    listOfMenus[2] = "Window";
    listOfMenus[3] = "Help";
    return listOfMenus;
  }

  /**
   * The plugin must return the Actions that should be associated 
   * with a particular menu. They will be appended onto the bottom of the menu
   * in most cases.
   */
  public Action[] registerMenuActions(String menu) {
    Action actionList[] = null;
    if (menu.equals("File")) {
      actionList = fileMenuActions;
    } else if (menu.equals("Edit")) {
      actionList = editMenuActions;
    } else if (menu.equals("Help")) {
      actionList = helpMenuActions;
    }
    return actionList;
  }

  /**
   * The plugin must return the list of Actions to be associated with the
   * toolbar for the framework. 
   */ 
  public Action[] registerToolbarActions() {
    return containerToolbarActions;;
  }

  public void setContainer(Object o) 
  {
  }

  /**
   * Set up the actions for menus and toolbars
   */
  private void initializeActions() {
    // FILE MENU ACTIONS
    fileMenuActions = new Action[2];

    Action exitItemAction = new AbstractAction("Exit") {
      public void actionPerformed(ActionEvent e) {
        exitApplication();
      }
    };
    exitItemAction.putValue(Action.SHORT_DESCRIPTION, "Exit Morpho");
    exitItemAction.putValue(Action.DEFAULT, SEPARATOR_PRECEDING);
    fileMenuActions[0] = exitItemAction;

    Action connectItemAction = new AbstractAction("Connect...") {
      public void actionPerformed(ActionEvent e) {
        ConnectionFrame cf = new ConnectionFrame();
        cf.setVisible(true);
      }
    };
    connectItemAction.putValue(Action.SHORT_DESCRIPTION, "Log In");
    fileMenuActions[1] = connectItemAction;

    // EDIT MENU ACTIONS
    editMenuActions = new Action[4];
    Action cutItemAction = new AbstractAction("Cut") {
      public void actionPerformed(ActionEvent e) {
        System.err.println("Cut requested.");
      }
    };
    cutItemAction.putValue(Action.SHORT_DESCRIPTION, 
                  "Cut the selection and put it on the Clipboard");
    cutItemAction.putValue(Action.SMALL_ICON, 
                    new ImageIcon(getClass().getResource("cut.gif")));
    cutItemAction.setEnabled(false);
    editMenuActions[0] = cutItemAction;

    Action copyItemAction = new AbstractAction("Copy") {
      public void actionPerformed(ActionEvent e) {
        System.err.println("Copy requested.");
      }
    };
    copyItemAction.putValue(Action.SHORT_DESCRIPTION, 
                  "Copy the selection and put it on the Clipboard");
    copyItemAction.putValue(Action.SMALL_ICON, 
                    new ImageIcon(getClass().getResource("copy.gif")));
    copyItemAction.setEnabled(false);
    editMenuActions[1] = copyItemAction;

    Action pasteItemAction = new AbstractAction("Paste") {
      public void actionPerformed(ActionEvent e) {
        System.err.println("Paste requested.");
      }
    };
    pasteItemAction.putValue(Action.SHORT_DESCRIPTION, 
                  "Paste the selection.");
    pasteItemAction.putValue(Action.SMALL_ICON, 
                    new ImageIcon(getClass().getResource("paste.gif")));
    pasteItemAction.setEnabled(false);
    editMenuActions[2] = pasteItemAction;

    Action prefsItemAction = new AbstractAction("Preferences...") {
      public void actionPerformed(ActionEvent e) {
        System.err.println("Preferences requested. GUI not yet implemented!");
      }
    };
    prefsItemAction.putValue(Action.SHORT_DESCRIPTION, 
                  "Open the Preferences dialog.");
    prefsItemAction.putValue(Action.DEFAULT, SEPARATOR_PRECEDING);
    editMenuActions[3] = prefsItemAction;

    // HELP MENU ACTIONS
    helpMenuActions = new Action[1];
    Action aboutItemAction = new AbstractAction("About...") {
      public void actionPerformed(ActionEvent e) {
        SplashFrame sf = new SplashFrame();
        sf.setVisible(true);
      }
    };
    aboutItemAction.putValue(Action.SHORT_DESCRIPTION, "About Morpho");
    aboutItemAction.putValue(Action.SMALL_ICON, 
                    new ImageIcon(getClass().getResource("about.gif")));
    helpMenuActions[0] = aboutItemAction;

    // Set up the toolbar for the application
    containerToolbarActions = new Action[3];
    containerToolbarActions[0] = cutItemAction;
    containerToolbarActions[1] = copyItemAction;
    containerToolbarActions[2] = pasteItemAction;
  }

  /**
   * The entry point for this application.
   * Sets the Look and Feel to the System Look and Feel.
   * Creates a new JFrame1 and makes it visible.
   */
  static public void main(String args[])
  {
    try
    {
      // Add the following code if you want the Look and Feel
      // to be set to the Look and Feel of the native system.
      /*
         try {
         UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
         } 
         catch (Exception e) { 
         }
       */
      SplashFrame sf = new SplashFrame(true);
      sf.setVisible(true);
      Date expiration = new Date(101, 5, 1);
      Date warning = new Date(101, 4, 1);
      Date now = new Date();
      if (now.after(expiration))
      {
	System.out.println ("This beta version of Morpho has expired! " +
           "See http://knb.ecoinformatics.org/ for a newer version.");
	JOptionPane.showMessageDialog(null,
           "This beta version of Morpho has expired! " +
           "See http://knb.ecoinformatics.org/ for a newer version.");
	System.exit(1);
      }
      else
      {
	if (now.after(warning))
	{
	  System.out.println("This beta version of Morpho will expire on " +
            "May 1, 2001. See http://knb.ecoinformatics.org/ for a " +
            "newer version.");
	  JOptionPane.showMessageDialog(null,
            "This beta version of Morpho will expire on May 1, 2001. " +
            "See http://knb.ecoinformatics.org/ for a newer version.");
	}
	//Create a new instance of our application's frame, and make it visible.
	ClientFramework clf = new ClientFramework();
	clf.setVisible(true);
	sf.dispose();
        // ConnectionFrame cf = new ConnectionFrame(clf);
        // cf.setVisible(true);
	ConfigXML config = new ConfigXML("config.xml");
	String log_file_setting = config.get("log_file", 0);
	if (log_file_setting != null)
	{
	  if (log_file_setting.equalsIgnoreCase("true"))
	  {
	    log_file = true;
	  }
	  else
	  {
	    log_file = false;
	  }
	}
	if (log_file)
	{
	  FileOutputStream err = new FileOutputStream("stderr.log");
	  // Constructor PrintStream(OutputStream) has been deprecated.
	  PrintStream errPrintStream = new PrintStream(err);
	  System.setErr(errPrintStream);
	  System.setOut(errPrintStream);
	}
      }

    }
    catch(Throwable t)
    {
      t.printStackTrace();
      //Ensure the application exits with an error condition.
      System.exit(1);
    }
  }

  /**
   * Notifies this component that it has been added to a container
   * This method should be called by <code>Container.add</code>, and 
   * not by user code directly.
   * Overridden here to adjust the size of the frame if needed.
   * @see java.awt.Container#removeNotify
   */
  public void addNotify()
  {
    // Record the size of the window prior to calling parents addNotify.
    Dimension size = getSize();

      super.addNotify();

    if (frameSizeAdjusted)
        return;
      frameSizeAdjusted = true;

    // Adjust size of frame according to the insets and menu bar
      javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
    int menuBarHeight = 0;
    if (menuBar != null)
        menuBarHeight = menuBar.getPreferredSize().height;
    Insets insets = getInsets();


      setSize(insets.left + insets.right + size.width,
	      insets.top + insets.bottom + size.height + menuBarHeight);
  }

  // Used by addNotify
  boolean frameSizeAdjusted = false;

  //{{DECLARE_CONTROLS
  java.awt.FileDialog saveFileDialog = new java.awt.FileDialog(this);
  java.awt.FileDialog openFileDialog = new java.awt.FileDialog(this);
  javax.swing.JPanel ToolBarPanel = new javax.swing.JPanel();
  javax.swing.JToolBar JToolBar1 = new javax.swing.JToolBar();

  javax.swing.JPanel ContentPanel = new javax.swing.JPanel();
  javax.swing.JTabbedPane JTabbedPane1 = new javax.swing.JTabbedPane();

  javax.swing.JLabel UnderConstruction = new javax.swing.JLabel();
  javax.swing.JLabel dataPict = new javax.swing.JLabel();
  javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
  com.symantec.itools.javax.swing.borders.LineBorder lineBorder1 =
    new com.symantec.itools.javax.swing.borders.LineBorder();
  javax.swing.JMenuBar JMenuBar1 = new javax.swing.JMenuBar();

  //}}
  edu.ucsb.nceas.metaedit.AbstractMdeBean mdeBean1 =
    (edu.ucsb.nceas.metaedit.AbstractMdeBean)
    createObject("edu.ucsb.nceas.metaedit.mdeBean");

  edu.ucsb.nceas.querybean.AbstractQueryBean queryBean1 =
    (edu.ucsb.nceas.querybean.AbstractQueryBean)
    createObject("edu.ucsb.nceas.querybean.QueryBean");

  //{{DECLARE_MENUS
  //}}

  void exitApplication()
  {
    try
    {
      // Beep
      Toolkit.getDefaultToolkit().beep();
      // Show a confirmation dialog
      int reply = JOptionPane.showConfirmDialog(this,
						"Do you really want to exit?",
						"Morpho - Exit",
						JOptionPane.YES_NO_OPTION,
						JOptionPane.QUESTION_MESSAGE);
      // If the confirmation was affirmative, handle exiting.
      if (reply == JOptionPane.YES_OPTION)
      {
	LogOut();
	this.setVisible(false);	// hide the Frame
	this.dispose();		// free the system resources
	System.exit(0);		// close the application
      }
    }
    catch(Exception e)
    {
    }
  }

  class SymWindow extends java.awt.event.WindowAdapter
  {
    public void windowClosing(java.awt.event.WindowEvent event)
    {
      Object object = event.getSource();
      if (object == ClientFramework.this)
	  ClientFramework_windowClosing(event);
    }
  }

  void ClientFramework_windowClosing(java.awt.event.WindowEvent event)
  {
    // to do: code goes here.
    ClientFramework_windowClosing_Interaction1(event);
  }

  void ClientFramework_windowClosing_Interaction1(java.awt.
						  event.WindowEvent event)
  {
    try
    {
      this.exitApplication();
    }
    catch(Exception e)
    {
    }
  }

  class SymAction implements java.awt.event.ActionListener
  {
    public void actionPerformed(java.awt.event.ActionEvent event)
    {
      Object object = event.getSource();
/*
      if (object == openItem)
	  openItem_actionPerformed(event);
      else if (object == saveItem)
	  saveItem_actionPerformed(event);
      else  if (object == exitItem)
	  exitItem_actionPerformed(event);
      else if (object == aboutItem)
	  aboutItem_actionPerformed(event);
      else if (object == openButton)
	  openButton_actionPerformed(event);
      else if (object == saveButton)
	  saveButton_actionPerformed(event);
      else if (object == saveserverButton)
	  saveserverButton_actionPerformed(event);
      else if (object == exportButton)
	  SaveDataItem_actionPerformed(event);
      else if (object == aboutButton)
	  aboutButton_actionPerformed(event);
      if (object == queryButton)
	  queryButton_actionPerformed(event);
      else if (object == ToolBarSearchText)
	  ToolBarSearchText_actionPerformed(event);
      else if (object == newItem)
	  newItem_actionPerformed(event);
      else if (object == saveAsItem)
	  saveAsItem_actionPerformed(event);
      else if (object == SaveToDatabase)
	  SaveToDatabase_actionPerformed(event);
      else if (object == PreviewXML)
	  PreviewXML_actionPerformed(event);
      else if (object == OptionsMenuItem)
	  OptionsMenuItem_actionPerformed(event);
      else if (object == ConnectMenuItem)
	  ConnectMenuItem_actionPerformed(event);
      else if (object == newButton)
	  newButton_actionPerformed(event);
      else if (object == SaveDataItem)
	  SaveDataItem_actionPerformed(event);
*/
    }
  }

  void SaveDataItem_actionPerformed(java.awt.event.ActionEvent event)
  {
    SubmitDataDialog sd = new SubmitDataDialog(this);
    sd.setVisible(true);
  }


  void openItem_actionPerformed(java.awt.event.ActionEvent event)
  {
    //openItem_actionPerformed_Interaction1(event);
    mdeBean1.openDocument();
  }

  void openItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
  {
    try
    {
      // openFileDialog Show the FileDialog
      openFileDialog.setVisible(true);
    }
    catch(Exception e)
    {
    }
  }

  void saveItem_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
    //saveItem_actionPerformed_Interaction1(event);
    mdeBean1.saveDocument();
  }

  void openButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.

    openButton_actionPerformed_Interaction1(event);
  }

  void openButton_actionPerformed_Interaction1(java.awt.
					       event.ActionEvent event)
  {
    mdeBean1.openDocument();
  }

  void saveserverButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    saveserverButton_actionPerformed_Interaction1(event);
  }

  void saveserverButton_actionPerformed_Interaction1(java.awt.
						     event.ActionEvent event)
  {
    SubmitDialog sd = new SubmitDialog(this);
      sd.setVisible(true);
  }


  void saveButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    mdeBean1.saveDocument();
  }


  class SymItem implements java.awt.event.ItemListener
  {
    public void itemStateChanged(java.awt.event.ItemEvent event)
    {
      Object object = event.getSource();
/*
      if (object == LocalSearchCheckBox)
	  LocalSearchCheckBox_itemStateChanged(event);
      else if (object == CatalogSearchCheckBox)
	  CatalogSearchCheckBox_itemStateChanged(event);
      else if (object == ExpertCheckBox)
	  ExpertCheckBox_itemStateChanged(event);
*/
    }
  }

  void queryButton_actionPerformed(java.awt.event.ActionEvent event)
  {
/*
    if (ToolBarSearchText.getText() != "")
    {
      JTabbedPane1.setSelectedIndex(1);
      queryBean1.searchFor(ToolBarSearchText.getText());
    }
*/
  }

  void ToolBarSearchText_actionPerformed(java.awt.event.ActionEvent event)
  {
/*
    if (ToolBarSearchText.getText() != "")
    {
      // JTabbedPane1.setSelectedIndex(1);
      queryBean1.searchFor(ToolBarSearchText.getText());
    }
*/
  }

  void newItem_actionPerformed(java.awt.event.ActionEvent event)
  {
    mdeBean1.newDocument();

  }

  void saveAsItem_actionPerformed(java.awt.event.ActionEvent event)
  {
    mdeBean1.saveDocumentAs();

  }

  void SaveToDatabase_actionPerformed(java.awt.event.ActionEvent event)
  {
    SubmitDialog sd = new SubmitDialog(this);
      sd.setVisible(true);
  }

  void PreviewXML_actionPerformed(java.awt.event.ActionEvent event)
  {
    mdeBean1.previewXMLFile();
  }

  void OptionsMenuItem_actionPerformed(java.awt.event.ActionEvent event)
  {
    mdeBean1.showOptions();;
  }

  class SymChange implements javax.swing.event.ChangeListener
  {
    public void stateChanged(javax.swing.event.ChangeEvent event)
    {
      Object object = event.getSource();
      if (object == JTabbedPane1)
	  JTabbedPane1_stateChanged(event);
    }
  }

  void JTabbedPane1_stateChanged(javax.swing.event.ChangeEvent event)
  {
    if (JTabbedPane1.getSelectedIndex() == 0)
    {
/*
      ElementChoiceMenuItem.setEnabled(true);
      ElementTextMenuItem.setEnabled(true);
      newItem.setEnabled(true);
      openItem.setEnabled(true);
      saveItem.setEnabled(true);
      SaveToDatabase.setEnabled(true);
      PreviewXML.setEnabled(true);
      newButton.setEnabled(true);
      openButton.setEnabled(true);
      saveButton.setEnabled(true);
      // saveserverButton.setEnabled(true);
*/
    }
    if (JTabbedPane1.getSelectedIndex() == 1)
    {
/*
      ElementChoiceMenuItem.setEnabled(false);
      ElementTextMenuItem.setEnabled(false);
      newItem.setEnabled(false);
      openItem.setEnabled(false);
      saveItem.setEnabled(false);
      SaveToDatabase.setEnabled(false);
      PreviewXML.setEnabled(false);
      newButton.setEnabled(false);
      openButton.setEnabled(false);
      saveButton.setEnabled(false);
      // saveserverButton.setEnabled(false);
*/
    }
    if (JTabbedPane1.getSelectedIndex() == 2)
    {
/*
      ElementChoiceMenuItem.setEnabled(false);
      ElementTextMenuItem.setEnabled(false);
      newItem.setEnabled(false);
      openItem.setEnabled(false);
      saveItem.setEnabled(false);
      SaveToDatabase.setEnabled(false);
      PreviewXML.setEnabled(false);
      newButton.setEnabled(false);
      openButton.setEnabled(false);
      saveButton.setEnabled(false);
      // saveserverButton.setEnabled(false);
*/
    }
  }

  // use to dynamically create an object from its name at run time
  // uses reflection
  static Object createObject(String className)
  {
    Object object = null;
      try
    {
      Class classDefinition = Class.forName(className);
        object = classDefinition.newInstance();
    }
    catch(InstantiationException e)
    {
      System.out.println(e);
    }
    catch(IllegalAccessException e)
    {
      System.out.println(e);
    }
    catch(ClassNotFoundException e)
    {
      System.out.println(e);
    }
    return object;
  }

  public void LogIn()
  {
    Properties prop = new Properties();
      prop.put("action", "Login Client");

    // Now try to write the document to the database
      try
    {
      //MBJEXCISE//ConfigXML config = new ConfigXML("config.xml");
      String MetaCatServletURL = config.get("MetaCatServletURL", 0);
        System.err.println("Trying: " + MetaCatServletURL);
      URL url = new URL(MetaCatServletURL);
      HttpMessage msg = new HttpMessage(url);
        prop.put("username", userName);
        prop.put("password", passWord);
      InputStream returnStream = msg.sendPostMessage(prop);
      StringWriter sw = new StringWriter();
      int c;
      while ((c = returnStream.read()) != -1)
      {
	sw.write(c);
      }
      returnStream.close();
      String res = sw.toString();
      sw.close();
      System.out.println(res);

    }
    catch(Exception e)
    {
      System.out.println("Error logging into system");
    }
  }

  public void LogOut()
  {
    Properties prop = new Properties();
    prop.put("action", "Logout");

    // Now try to write the document to the database
    try
    {
      //MBJEXCISE//ConfigXML config = new ConfigXML("config.xml");
      String MetaCatServletURL = config.get("MetaCatServletURL", 0);
        System.err.println("Trying: " + MetaCatServletURL);
      URL url = new URL(MetaCatServletURL);
      HttpMessage msg = new HttpMessage(url);
      InputStream returnStream = msg.sendPostMessage(prop);
      StringWriter sw = new StringWriter();
      int c;
      while ((c = returnStream.read()) != -1)
      {
	sw.write(c);
      }
      returnStream.close();
      String res = sw.toString();
      sw.close();
    }
    catch(Exception e)
    {
      System.out.println("Error logging out of system");
    }
  }

  void LocalSearchCheckBox_itemStateChanged(java.awt.event.ItemEvent event)
  {
/*
    queryBean1.setSearchLocal(LocalSearchCheckBox.isSelected());
*/
  }

  void CatalogSearchCheckBox_itemStateChanged(java.awt.event.ItemEvent event)
  {
/*
    queryBean1.setSearchNetwork(CatalogSearchCheckBox.isSelected());
*/
  }

  void ExpertCheckBox_itemStateChanged(java.awt.event.ItemEvent event)
  {
/*
    queryBean1.setExpertMode(ExpertCheckBox.isSelected());
*/
  }

  void ConnectMenuItem_actionPerformed(java.awt.event.ActionEvent event)
  {
    ConnectionFrame cf = new ConnectionFrame(this);
    cf.setVisible(true);
  }

  void newButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    mdeBean1.newDocument();
  }
}
