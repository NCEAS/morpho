/**
 *        Name: ConnectionFrame.java
 *     Purpose: A Class that connects the user to the networked KDI
 *     system
 *   Copyright: 2000 Regents of the University of California and the
 *              National Center for Ecological Analysis and Synthesis
 *     Authors: Dan Higgins
 *
 *     Version: '$Id: ConnectionFrame.java,v 1.3 2000-08-11 18:02:44 higgins Exp $'
 */

package edu.ucsb.nceas.dtclient;

import java.net.*;
import java.io.*;
import java.util.*;
import java.awt.*;
import javax.swing.*;
import com.symantec.itools.javax.swing.JButtonGroupPanel;
import com.symantec.itools.javax.swing.borders.LineBorder;
public class ConnectionFrame extends javax.swing.JFrame
{
    ClientFramework container = null;
	public ConnectionFrame()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Connection");
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(317,334);
		/* Center the Frame */
		Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();
		Rectangle frameDim = getBounds();
		setLocation((screenDim.width - frameDim.width) / 2 ,
		        (screenDim.height - frameDim.height) /2);
		setVisible(false);
		JLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel1.setText("Connection Choices");
		getContentPane().add(BorderLayout.NORTH,JLabel1);
		JLabel1.setForeground(java.awt.Color.black);
		JLabel1.setFont(new Font("Dialog", Font.BOLD|Font.ITALIC, 14));
		JLabel1.setBounds(0,0,317,16);
		JPanel2.setLayout(new BorderLayout(0,0));
		getContentPane().add(BorderLayout.CENTER,JPanel2);
		JPanel2.setBounds(0,16,317,283);
		JButtonGroupPanel1.setLayout(new GridLayout(5,0,0,4));
		JPanel2.add(BorderLayout.NORTH,JButtonGroupPanel1);
		JButtonGroupPanel1.setBounds(0,0,317,161);
		AnonymousRadioButton.setSelected(true);
		AnonymousRadioButton.setText("Anonymous Connection (no password needed)");
		AnonymousRadioButton.setActionCommand("Anonymous Connection (no pasword needed");
		JButtonGroupPanel1.add(AnonymousRadioButton);
		AnonymousRadioButton.setBounds(0,0,317,29);
		RegisteredUserRadioButton.setText("Registered User Connection");
		RegisteredUserRadioButton.setActionCommand("Registered User Connection");
		JButtonGroupPanel1.add(RegisteredUserRadioButton);
		RegisteredUserRadioButton.setBounds(0,33,317,29);
		JPanel3.setLayout(new FlowLayout(FlowLayout.LEFT,5,5));
		JButtonGroupPanel1.add(JPanel3);
		JPanel3.setBounds(0,66,317,29);
		Name.setText("Name");
		Name.setEnabled(false);
		JPanel3.add(Name);
		Name.setForeground(java.awt.Color.black);
		Name.setFont(new Font("Dialog", Font.PLAIN, 12));
		Name.setBounds(5,7,34,15);
		NameTextField.setColumns(19);
		NameTextField.setText("anonymous");
		NameTextField.setEnabled(false);
		JPanel3.add(NameTextField);
		NameTextField.setBounds(44,5,209,19);
		JPanel4.setLayout(new FlowLayout(FlowLayout.LEFT,5,5));
		JButtonGroupPanel1.add(JPanel4);
		JPanel4.setBounds(0,99,317,29);
		Password.setText("Password");
		Password.setEnabled(false);
		JPanel4.add(Password);
		Password.setForeground(java.awt.Color.black);
		Password.setFont(new Font("Dialog", Font.PLAIN, 12));
		Password.setBounds(5,7,56,15);
		PWTextField.setColumns(17);
		PWTextField.setEnabled(false);
		JPanel4.add(PWTextField);
		PWTextField.setBounds(66,5,187,19);
		ConnectionResultsTextArea.setText("Connection Results");
		JPanel2.add(BorderLayout.CENTER,ConnectionResultsTextArea);
		ConnectionResultsTextArea.setBounds(0,161,317,122);
		JPanel1.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		getContentPane().add(BorderLayout.SOUTH,JPanel1);
		JPanel1.setBounds(0,299,317,35);
		connectButton.setText("Connect");
		connectButton.setActionCommand("OK");
		JPanel1.add(connectButton);
		connectButton.setBounds(73,5,81,25);
		continueButton.setText("Continue");
		continueButton.setActionCommand("Continue");
		JPanel1.add(continueButton);
		continueButton.setBounds(159,5,85,25);
		//}}

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymItem lSymItem = new SymItem();
		RegisteredUserRadioButton.addItemListener(lSymItem);
		SymAction lSymAction = new SymAction();
		connectButton.addActionListener(lSymAction);
		continueButton.addActionListener(lSymAction);
		//}}
	}

	public ConnectionFrame(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	public ConnectionFrame(ClientFramework cont) {
	    this();
	    container = cont;
	}

	public void setVisible(boolean b)
	{
		if (b)
//			setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new ConnectionFrame()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JPanel JPanel2 = new javax.swing.JPanel();
	com.symantec.itools.javax.swing.JButtonGroupPanel JButtonGroupPanel1 = new com.symantec.itools.javax.swing.JButtonGroupPanel();
	javax.swing.JRadioButton AnonymousRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton RegisteredUserRadioButton = new javax.swing.JRadioButton();
	javax.swing.JPanel JPanel3 = new javax.swing.JPanel();
	javax.swing.JLabel Name = new javax.swing.JLabel();
	javax.swing.JTextField NameTextField = new javax.swing.JTextField();
	javax.swing.JPanel JPanel4 = new javax.swing.JPanel();
	javax.swing.JLabel Password = new javax.swing.JLabel();
	javax.swing.JTextField PWTextField = new javax.swing.JTextField();
	javax.swing.JTextArea ConnectionResultsTextArea = new javax.swing.JTextArea();
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JButton connectButton = new javax.swing.JButton();
	javax.swing.JButton continueButton = new javax.swing.JButton();
	//}}

	//{{DECLARE_MENUS
	//}}


	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == RegisteredUserRadioButton)
				RegisteredUserRadioButton_itemStateChanged(event);
		}
	}

	void RegisteredUserRadioButton_itemStateChanged(java.awt.event.ItemEvent event)
	{
		if(RegisteredUserRadioButton.isSelected()) {
		   Name.setEnabled(true);
		   Password.setEnabled(true);
		   NameTextField.setEnabled(true);
		   PWTextField.setEnabled(true);
		}
		else {
		   Name.setEnabled(false);
		   Password.setEnabled(false);
		   NameTextField.setEnabled(false);
		   PWTextField.setEnabled(false);
		}
			 
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == connectButton)
				connectButton_actionPerformed(event);
			else if (object == continueButton)
				continueButton_actionPerformed(event);
		}
	}

	void connectButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	 if (AnonymousRadioButton.isSelected()) {
	        dispose();
	    }
	 else {
      Properties prop = new Properties();
        prop.put("action","Login Client");

      // Now try to write the document to the database
      try {
        PropertyResourceBundle options = (PropertyResourceBundle)PropertyResourceBundle.getBundle("client");  // DFH
        String MetaCatServletURL =(String)options.handleGetObject("MetaCatServletURL");     // DFH
        System.err.println("Trying: " + MetaCatServletURL);
        URL url = new URL(MetaCatServletURL);
        HttpMessage msg = new HttpMessage(url);
        if (container!=null) {
            container.userName = NameTextField.getText();
            container.passWord = PWTextField.getText();
        }
            prop.put("username", NameTextField.getText());
            prop.put("password", PWTextField.getText());
        
        InputStream returnStream = msg.sendPostMessage(prop);
	    StringWriter sw = new StringWriter();
	    int c;
	    while ((c = returnStream.read()) != -1) {
           sw.write(c);
        }
        returnStream.close();
        String res = sw.toString();
        sw.close();
        ConnectionResultsTextArea.setText(res);   
      } catch (Exception e) {
        System.out.println("Error logging into system");
      }
     }
			 
	}
	
	
	

	void continueButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		dispose();
			 
	}
}