/**
 *        Name: SubmitDialog.java
 *     Purpose: A Class that is the top frame for an XML_Query sample
 *		application (searchs local collection of XML files
 *   Copyright: 2000 Regents of the University of California and the
 *              National Center for Ecological Analysis and Synthesis
 *     Authors: Dan Higgins
 *
 *     Version: '$Id: SubmitDialog.java,v 1.14 2001-04-25 22:23:00 jones Exp $'
 */

package edu.ucsb.nceas.dtclient;

import java.awt.*;
import javax.swing.*;
import java.io.*;
import java.net.*;
import java.util.*;
import com.ibm.xml.parser.*;
import org.w3c.dom.*;

import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;
import org.xml.sax.helpers.DefaultHandler;

import com.symantec.itools.javax.swing.borders.EtchedBorder;



public class SubmitDialog extends javax.swing.JDialog implements ContentHandler
{
    
    ClientFramework container = null;
    String userName = "public";
    String passWord = "none";
    private Stack elementStack = null;
    private boolean writeSucceeded = false;
    private String successMessage = "";
    private String errorMessage = "";
    String documentID;
    String parserName = "org.apache.xerces.parsers.SAXParser";
    char sepchar = '.';
    String tempXMLFileName = null;
    boolean idExistsFlag = false;
    String access = "yes";   
    
	public SubmitDialog(Frame parent)
	{
		super(parent);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Document Insertion Choices");
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(499,335);
		setVisible(false);
		JPanel10.setLayout(new BorderLayout(0,0));
		getContentPane().add(BorderLayout.CENTER,JPanel10);
		JPanel10.setBounds(0,0,499,300);
		JPanel1.setLayout(new GridLayout(0,1,20,0));
		JPanel10.add(BorderLayout.WEST, JPanel1);
		JPanel1.setBounds(0,0,93,300);
		JLabel1.setToolTipText("The XML document to be inserted in the remote databse");
		JLabel1.setText(" File to Submit:");
		JPanel1.add(JLabel1);
		JLabel1.setForeground(java.awt.Color.black);
		JLabel1.setBounds(0,0,93,75);
		JLabel2.setToolTipText("Every document should have a unique reference number");
		JLabel2.setText(" ID Number:");
		JPanel1.add(JLabel2);
		JLabel2.setForeground(java.awt.Color.black);
		JLabel2.setBounds(0,75,93,75);
		JLabel3.setToolTipText("The IDLabel refers to the tag name in the XML document where the ID number should be inserted");
		JLabel3.setText(" ID Label:");
		JPanel1.add(JLabel3);
		JLabel3.setForeground(java.awt.Color.black);
		JLabel3.setBounds(0,150,93,75);
		JLabel4.setText(" Access Control:");
		JPanel1.add(JLabel4);
		JLabel4.setForeground(java.awt.Color.black);
		JLabel4.setBounds(0,225,93,75);
		JPanel2.setLayout(new GridLayout(0,1,0,2));
		JPanel10.add(BorderLayout.CENTER,JPanel2);
		JPanel2.setBounds(93,0,406,300);
		JPanel3.setBorder(etchedBorder);
		JPanel3.setLayout(new GridLayout(2,1,0,0));
		JPanel2.add(JPanel3);
		JPanel3.setBounds(0,0,406,73);
		JPanel8.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JPanel3.add(JPanel8);
		JPanel8.setBounds(2,2,402,34);
		DocumentTextBox.setColumns(25);
		DocumentTextBox.setText("Document Currently Being Edited");
		JPanel8.add(DocumentTextBox);
		DocumentTextBox.setBounds(63,5,275,19);
		JPanel9.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JPanel3.add(JPanel9);
		JPanel9.setBounds(2,36,402,34);
		CurrentCheckBox.setSelected(true);
		CurrentCheckBox.setText("Current Doc");
		CurrentCheckBox.setActionCommand("Current Doc");
		JPanel9.add(CurrentCheckBox);
		CurrentCheckBox.setBounds(101,6,93,23);
		SelectFileButton.setText("Select File...");
		SelectFileButton.setActionCommand("Select File...");
		JPanel9.add(SelectFileButton);
		SelectFileButton.setBounds(199,5,101,25);
		JPanel4.setBorder(etchedBorder);
		JPanel4.setLayout(new GridLayout(2,1,0,0));
		JPanel2.add(JPanel4);
		JPanel4.setBounds(0,75,406,73);
		JPanel7.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JPanel4.add(JPanel7);
		JPanel7.setBounds(2,2,402,34);
		JLabel6.setText("Document ID:");
		JPanel7.add(JLabel6);
		JLabel6.setForeground(java.awt.Color.black);
		JLabel6.setFont(new Font("Dialog", Font.PLAIN, 12));
		JLabel6.setBounds(51,7,75,15);
		globalidTextBox.setColumns(20);
		JPanel7.add(globalidTextBox);
		globalidTextBox.setBounds(131,5,220,19);
		JPanel12.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JPanel4.add(JPanel12);
		JPanel12.setBounds(2,36,402,34);
		UserRadioButton.setToolTipText("User required to input ID");
		UserRadioButton.setText("User");
		UserRadioButton.setActionCommand("User");
		JPanel12.add(UserRadioButton);
		UserRadioButton.setBounds(110,5,52,23);
		LocalRadioButton.setToolTipText("ID generated locally");
		LocalRadioButton.setText("Local");
		LocalRadioButton.setActionCommand("Local");
		JPanel12.add(LocalRadioButton);
		LocalRadioButton.setBounds(167,5,56,23);
		ServerRadioButton.setSelected(true);
		ServerRadioButton.setToolTipText("ID Generated by Server");
		ServerRadioButton.setText("Server");
		ServerRadioButton.setActionCommand("Server");
		JPanel12.add(ServerRadioButton);
		ServerRadioButton.setBounds(228,5,63,23);
		JPanel5.setBorder(etchedBorder);
		JPanel5.setLayout(new GridLayout(2,1,0,0));
		JPanel2.add(JPanel5);
		JPanel5.setBounds(0,150,406,73);
		JPanel13.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JPanel5.add(JPanel13);
		JPanel13.setBounds(2,2,402,34);
		idtagTextField.setColumns(25);
		idtagTextField.setText("meta_file_id");
		JPanel13.add(idtagTextField);
		idtagTextField.setBounds(63,5,275,19);
		JPanel14.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JPanel5.add(JPanel14);
		JPanel14.setBounds(2,36,402,34);
		JLabel8.setText("Enter xml field name where ID is to be inserted");
		JPanel14.add(JLabel8);
		JLabel8.setForeground(java.awt.Color.black);
		JLabel8.setFont(new Font("Dialog", Font.PLAIN, 12));
		JLabel8.setBounds(73,5,255,15);
		JPanel6.setBorder(etchedBorder);
		JPanel6.setLayout(new GridLayout(2,1,0,0));
		JPanel2.add(JPanel6);
		JPanel6.setBounds(0,225,406,73);
		JPanel15.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JPanel6.add(JPanel15);
		JPanel15.setBounds(2,2,402,34);
		AnyUser.setSelected(true);
		AnyUser.setText("Any User:");
		AnyUser.setActionCommand("Any User:");
		JPanel15.add(AnyUser);
		AnyUser.setBounds(79,10,79,23);
		JPanel17.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JPanel15.add(JPanel17);
		JPanel17.setBounds(163,5,159,33);
		JCheckBox1.setSelected(true);
		JCheckBox1.setText("read");
		JCheckBox1.setActionCommand("read");
		JPanel17.add(JCheckBox1);
		JCheckBox1.setFont(new Font("Dialog", Font.PLAIN, 12));
		JCheckBox1.setBounds(5,5,50,23);
		JCheckBox2.setText("write");
		JCheckBox2.setActionCommand("write");
		JPanel17.add(JCheckBox2);
		JCheckBox2.setFont(new Font("Dialog", Font.PLAIN, 12));
		JCheckBox2.setBounds(60,5,51,23);
		JCheckBox3.setText("all");
		JCheckBox3.setActionCommand("all");
		JPanel17.add(JCheckBox3);
		JCheckBox3.setFont(new Font("Dialog", Font.PLAIN, 12));
		JCheckBox3.setBounds(116,5,38,23);
		JPanel16.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JPanel6.add(JPanel16);
		JPanel16.setBounds(2,36,402,34);
		SetUserButton.setText("Set Access by Individual Users...");
		SetUserButton.setActionCommand("Set Access by Individual Users...");
		JPanel16.add(SetUserButton);
		SetUserButton.setBounds(92,5,217,25);
		//$$ etchedBorder.move(12,360);
		//$$ etchedBorder1.move(12,360);
		JPanel11.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		getContentPane().add(BorderLayout.SOUTH,JPanel11);
		JPanel11.setBounds(0,300,499,35);
		SubmitButton.setToolTipText("Send document to remote server");
		SubmitButton.setText("Submit");
		SubmitButton.setActionCommand("Submit");
		JPanel11.add(SubmitButton);
		SubmitButton.setBounds(17,5,75,25);
		DeleteButton.setText("Delete");
		DeleteButton.setActionCommand("Delete");
		JPanel11.add(DeleteButton);
		DeleteButton.setBounds(97,5,71,25);
		UpdateButton.setText("Update");
		UpdateButton.setActionCommand("Update");
		JPanel11.add(UpdateButton);
		UpdateButton.setBounds(173,5,75,25);
		InsertButton.setToolTipText("Insert ID Number in ID Label tag of local document");
		InsertButton.setText("Insert ID in Local File");
		InsertButton.setActionCommand("Insert ID in Local File");
		JPanel11.add(InsertButton);
		InsertButton.setBounds(253,5,151,25);
		CancelButton.setText("Cancel");
		CancelButton.setActionCommand("Cancel");
		JPanel11.add(CancelButton);
		CancelButton.setBounds(409,5,73,25);
		JPanel18.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		getContentPane().add(JPanel18);
		JPanel18.setBounds(0,0,499,300);
		//}}
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		SetUserButton.addActionListener(lSymAction);
		SelectFileButton.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		CurrentCheckBox.addItemListener(lSymItem);
		CancelButton.addActionListener(lSymAction);
		UserRadioButton.addItemListener(lSymItem);
		ServerRadioButton.addItemListener(lSymItem);
		LocalRadioButton.addItemListener(lSymItem);
		InsertButton.addActionListener(lSymAction);
		SubmitButton.addActionListener(lSymAction);
		DeleteButton.addActionListener(lSymAction);
		UpdateButton.addActionListener(lSymAction);
		//}}
	}

	public SubmitDialog()
	{
		this((Frame)null);
	}

	public SubmitDialog(String sTitle)
	{
		
		this();
		setTitle(sTitle);
	}
	
	public SubmitDialog(ClientFramework cf)
	{
		this((Frame)null);
	    container = cf;
	    userName = cf.getUserName();
	    //MBJOUTDATED//passWord = cf.passWord;
	    this.setModal(false);
		//now save current xml doc as file and get id
            String temp = null;
	    //MBJOUTDATED//temp = container.mdeBean1.getSaveString();
		    System.out.println("temp string created");
	    
		if ((temp==null)||(temp.length()==0)) {
		    JOptionPane.showMessageDialog(this,"Unable to obtain current XML document!");
//		    localidTextBox.setText(get_id());
		}
		else {
		    saveAsTempFile(temp);
		    System.out.println("temp file created:");
		    String idstring = getIDFromFile(tempXMLFileName,"meta_file_id");
		    if (idstring!=null) {
		        if (idstring.lastIndexOf(sepchar)>0) {  // no colon -->invalid id
                    String global = idstring;
                    globalidTextBox.setText(global);
                    idExistsFlag = true;
		        }
		    }
		}

	    
	}

	public void setVisible(boolean b)
	{
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

    public void setContainer(ClientFramework cf) {
        container = cf;
    }
    
	static public void main(String args[])
	{
		(new SubmitDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JPanel JPanel10 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JPanel JPanel2 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel3 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel8 = new javax.swing.JPanel();
	javax.swing.JTextField DocumentTextBox = new javax.swing.JTextField();
	javax.swing.JPanel JPanel9 = new javax.swing.JPanel();
	javax.swing.JCheckBox CurrentCheckBox = new javax.swing.JCheckBox();
	javax.swing.JButton SelectFileButton = new javax.swing.JButton();
	javax.swing.JPanel JPanel4 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel7 = new javax.swing.JPanel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JTextField globalidTextBox = new javax.swing.JTextField();
	javax.swing.JPanel JPanel12 = new javax.swing.JPanel();
	javax.swing.JRadioButton UserRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton LocalRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton ServerRadioButton = new javax.swing.JRadioButton();
	javax.swing.JPanel JPanel5 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel13 = new javax.swing.JPanel();
	javax.swing.JTextField idtagTextField = new javax.swing.JTextField();
	javax.swing.JPanel JPanel14 = new javax.swing.JPanel();
	javax.swing.JLabel JLabel8 = new javax.swing.JLabel();
	javax.swing.JPanel JPanel6 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel15 = new javax.swing.JPanel();
	javax.swing.JCheckBox AnyUser = new javax.swing.JCheckBox();
	javax.swing.JPanel JPanel17 = new javax.swing.JPanel();
	javax.swing.JCheckBox JCheckBox1 = new javax.swing.JCheckBox();
	javax.swing.JCheckBox JCheckBox2 = new javax.swing.JCheckBox();
	javax.swing.JCheckBox JCheckBox3 = new javax.swing.JCheckBox();
	javax.swing.JPanel JPanel16 = new javax.swing.JPanel();
	javax.swing.JButton SetUserButton = new javax.swing.JButton();
	com.symantec.itools.javax.swing.borders.EtchedBorder etchedBorder = new com.symantec.itools.javax.swing.borders.EtchedBorder();
	javax.swing.JPanel JPanel11 = new javax.swing.JPanel();
	javax.swing.JButton SubmitButton = new javax.swing.JButton();
	javax.swing.JButton DeleteButton = new javax.swing.JButton();
	javax.swing.JButton UpdateButton = new javax.swing.JButton();
	javax.swing.JButton InsertButton = new javax.swing.JButton();
	javax.swing.JButton CancelButton = new javax.swing.JButton();
	javax.swing.JPanel JPanel18 = new javax.swing.JPanel();
	//}}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == SetUserButton)
				SetUserButton_actionPerformed(event);
			else if (object == SelectFileButton)
				SelectFileButton_actionPerformed(event);
			else if (object == CancelButton)
				CancelButton_actionPerformed(event);
			else if (object == InsertButton)
				InsertButton_actionPerformed(event);
			else if (object == SubmitButton)
				SubmitButton_actionPerformed(event);
			else if (object == DeleteButton)
				DeleteButton_actionPerformed(event);
			else if (object == UpdateButton)
				UpdateButton_actionPerformed(event);
		}
	}

	void SetUserButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		try {
			// SetUserDialog Create and show as modal
			{
				SetUserDialog SetUserDialog1 = new SetUserDialog();
				SetUserDialog1.setModal(true);
				SetUserDialog1.show();
			}
		} catch (java.lang.Exception e) {
		}
	}


	void SelectFileButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    
	    globalidTextBox.setText("");
	    ServerRadioButton.setSelected(true);
		StringBuffer txt = new StringBuffer();
		try {
			// saveFileDialog Show the FileDialog
			container.openFileDialog.setVisible(true);
		} catch (Exception e) {}
		String file = container.openFileDialog.getFile();
		if (file!=null) {
		    file = container.openFileDialog.getDirectory() + file;
		    int x;
		    CurrentCheckBox.setSelected(false);
		    DocumentTextBox.setText(file);
		    String idstring = getIDFromFile(file,idtagTextField.getText());
		    if (idstring!=null) {
		    //    if (idstring.lastIndexOf(sepchar)>0) {  // no colon -->invalid id
            //        String global = idstring; 
            //        globalidTextBox.setText(global);
            //        idExistsFlag = true;
		    //    }
		    }
		}
    }

 class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == CurrentCheckBox)
				CurrentCheckBox_itemStateChanged(event);
			else if (object == UserRadioButton)
				UserRadioButton_itemStateChanged(event);
			else if (object == ServerRadioButton)
				ServerRadioButton_itemStateChanged(event);
			else if (object == LocalRadioButton)
				LocalRadioButton_itemStateChanged(event);
		}
	}
	
void CurrentCheckBox_itemStateChanged(java.awt.event.ItemEvent event)
	{
		if (CurrentCheckBox.isSelected()) {
		    DocumentTextBox.setText("Document Currently Being Edited");
		}
		else {
		    DocumentTextBox.setText("");
		}
	}
	
    private String get_id() {
        long timeStamp = System.currentTimeMillis();
        String tempID = Long.toString(timeStamp) + Long.toString(Runtime.getRuntime().freeMemory());
        // trim to return only last 8 characters
        String temp = tempID.substring(tempID.length()-8,tempID.length());
        return temp;
    }
	
	

	void CancelButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		dispose();
			 
	}

	void UserRadioButton_itemStateChanged(java.awt.event.ItemEvent event)
	{
        if(UserRadioButton.isSelected()) {
            LocalRadioButton.setSelected(false);
            ServerRadioButton.setSelected(false);
            globalidTextBox.setText("");
            globalidTextBox.setEditable(true);
        }
	}

	void ServerRadioButton_itemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(ServerRadioButton.isSelected()) {
            LocalRadioButton.setSelected(false);
            UserRadioButton.setSelected(false);
            globalidTextBox.setText("");
            globalidTextBox.setEditable(false);
        }
	}

	void LocalRadioButton_itemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(LocalRadioButton.isSelected()) {
            ServerRadioButton.setSelected(false);
            UserRadioButton.setSelected(false);
            globalidTextBox.setText("MY_ID");
            globalidTextBox.setEditable(true);
        }
	}
	
	
/*
// routine to reproduce an XML input stream with the value of a single
// tag changed to a new value. To be used to replace id tags
*/
public static void replaceXMLText(InputStream is, OutputStream os, String tagname, String replacement) {
    BufferedReader in = new BufferedReader(new InputStreamReader(is));
    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(os));

    try {
        String line = in.readLine();
        while (line!=null) {
            if (line.indexOf(tagname)>=0) {   // tag name found!
                int iii = line.indexOf(tagname)+tagname.length();
                int jjj = line.indexOf(">",iii); // end of start tag
                while (jjj<0) {   // end of start tag not on this line
                    line = line + in.readLine();
                    jjj = line.indexOf(">",iii);
                }
                String beginString = line.substring(0,jjj+1);
                
                int kkk = line.indexOf("</",jjj+1);
                while (kkk<0) {   // beginning of tag not on this line
                    line = line + in.readLine();
                    kkk = line.indexOf("</",jjj+1);
                }
                String endString = line.substring(kkk, line.length());
                String outputString = beginString+replacement+endString;
                out.write(outputString,0,outputString.length());
                out.newLine();
            }
            else {
                out.write(line, 0, line.length());
                out.newLine();
            }
            line = in.readLine();  // next line
        }
        
        out.flush();
        out.close();
        in.close();
    }
    catch (Exception e) {System.out.println("Error replacing XMLText!");}
}

public void ReplaceFile(String file_in, String tag, String newid) {
    File infile = new File(file_in);
    String file_out = file_in+"tmp";
    File outfile = new File(file_out);
    try{
    FileInputStream instream = new FileInputStream(infile);
    FileOutputStream outstream = new FileOutputStream(outfile);
    replaceXMLText(instream,outstream,tag,newid);
    }
    catch (Exception e) {}
    infile.delete();
    outfile.renameTo(infile);
}	

// retrieves the current value of a named tag (the id tag)
public String getXMLID(InputStream is, String tagname) {
    BufferedReader in = new BufferedReader(new InputStreamReader(is));
    try {
        String line = in.readLine();
        while (line!=null) {
            if (line.indexOf(tagname)>=0) {   // tag name found!
                int iii = line.indexOf(tagname)+tagname.length();
                int jjj = line.indexOf(">",iii); // end of start tag
                while (jjj<0) {   // end of start tag not on this line
                    line = line + in.readLine();
                    jjj = line.indexOf(">",iii);
                }
                
                int kkk = line.indexOf("</",jjj+1);
                while (kkk<0) {   // beginning of tag not on this line
                    line = line + in.readLine();
                    kkk = line.indexOf("</",jjj+1);
                }
                String outputString = line.substring(jjj+1,kkk);
                outputString.trim();
                in.close();
                return outputString;
            }
            line = in.readLine();  // next line
        }
        
        in.close();
    }
    catch (Exception e) {System.out.println("Error replacing XMLText!");}
    return null;
    
}

public String getIDFromFile(String file_in, String tag) {
    File infile = new File(file_in);
    try{
        FileInputStream instream = new FileInputStream(infile);
        if (instream==null) System.out.println("instream is null!!");
        String ID = getXMLID(instream, tag);
        return ID;
    }
    catch (Exception e) {
        return null;
        }
 
}

void InsertButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    if (!CurrentCheckBox.isSelected()) {
	        if ((globalidTextBox.getText().length()>0)) {
	            String newID = globalidTextBox.getText();
		        ReplaceFile(DocumentTextBox.getText(),idtagTextField.getText(),newID);
		    }
		    else {
		        JOptionPane.showMessageDialog(null, "Both the global and local ID fields must have values!", "Alert", JOptionPane.INFORMATION_MESSAGE);
		    }
		}
		else {
		        JOptionPane.showMessageDialog(null, "A file must first be selected.", "Alert", JOptionPane.INFORMATION_MESSAGE);
		}
	}




	void SubmitButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    if (AnyUser.isSelected()) {
	       access = "yes"; 
	    }
	    else {
	       access = "no";
	    }
	    StringBuffer txt = new StringBuffer();
	    if (container.getUserName().equals("public")) {
	        JOptionPane.showMessageDialog(this,"You must be logged in as a registered user to insert data into the system catalog!");
	    }
	    else {
		try {
		    if(CurrentCheckBox.isSelected()) {   // use the xml doc currently being edited
                        String temp = null;
		        //MBJOUTDATED//temp = container.mdeBean1.getSaveString();
		        if ((temp==null)||(temp.length()==0)) {
		            JOptionPane.showMessageDialog(this,"Unable to obtain current XML document!");
		            return;
		        }
		        txt.append(temp);
		    }
		    else{
		        String file = DocumentTextBox.getText();
		        FileReader fr = new FileReader(file);
		        int x;
		        while((x=fr.read())!=-1) {
		            txt.append((char)x);
		         }
		        fr.close();
		    }
		    int result = JOptionPane.YES_OPTION;
		    if (idExistsFlag) {
		       result = JOptionPane.showConfirmDialog(null, "An ID already in document. Do you want to insert a new ID?", "choose one", JOptionPane.YES_NO_OPTION); 
		    }
		  if (result==JOptionPane.YES_OPTION) {
            System.err.println("Trying: " + container.MetaCatServletURL);
		    URL url = new URL(container.MetaCatServletURL);
		    HttpMessage msg = new HttpMessage(url);
		    Properties prop = new Properties();
		    prop.put("action","insert");
		    prop.put("public", access);
		    prop.put("doctext",txt.toString());
		    String indocid = getdocid();
		    if (indocid!=null) { prop.put("docid",indocid);}
		    
		    InputStream in = msg.sendPostMessage(prop);
		    
	
        // Determine the assigned docid if insert successful
        XMLReader parser = null;

        // Set up the SAX document handlers for parsing
        try {
          // Get an instance of the parser
          parser = XMLReaderFactory.createXMLReader(parserName);
          // Set the ContentHandler to this instance
          parser.setContentHandler(this);
          parser.parse(new InputSource(in));
        } catch (Exception e) {
           System.err.println(e.toString());
        }

        if (writeSucceeded) {
   //       System.out.println("Success. The docid is " + documentID + ".");
            String global = documentID;
            boolean change_flag = false;
            if (globalidTextBox.getText().equals(global)) change_flag=true;
            globalidTextBox.setText(global);
	        if (!CurrentCheckBox.isSelected()) {
	            if ((globalidTextBox.getText().length()>0)) {
	                String newID = globalidTextBox.getText();
		            ReplaceFile(DocumentTextBox.getText(),idtagTextField.getText(),newID);
		        }
		        else {
		            JOptionPane.showMessageDialog(this,"Either global or local id is missing!");
		        }
		    }
		    else {
		        // this is where the returned id should be put into the current document.
		        if (tempXMLFileName!=null) {
		            File tmp = new File(tempXMLFileName);
		            if (tmp.exists()) {
	                    if ((globalidTextBox.getText().length()>0)) {
	                        String newID = globalidTextBox.getText();
		                    ReplaceFile(tempXMLFileName,idtagTextField.getText(),newID);
		                    //MBJOUTDATED//container.mdeBean1.openDocument(tmp);
		                }
		            }
		        }
		        else {
		            JOptionPane.showMessageDialog(this,"Unable to update current file with ID!");
		        }
		}
            String message = "Success. The docid is " + documentID + ".";
            if (change_flag) {
                message = message + " New docid provided by server!";
            }
          JOptionPane.showMessageDialog(this,message);
        }
        else {
//          System.out.println("Failure message = "+errorMessage);  
          JOptionPane.showMessageDialog(this,"Writing the document to the databse failed.");
        }
          } // end of 'result' if
      } catch (Exception e) {
        System.out.println("Error inserting to database.");
        JOptionPane.showMessageDialog(this,"Error inserting to database.");
      }
    }
        
	
    }	
	
	private String getdocid() {
	    String result = null;
//	    if (!ServerRadioButton.isSelected()) {
	       if ((globalidTextBox.getText().length()>0)) {
	            result =  globalidTextBox.getText();
//	       }
	    }
	    return result;
	}
	
    public void startElement (String uri, String localName,
                              String qName, Attributes atts)
           throws SAXException {
      elementStack.push(localName);
      if (localName.equals("success")) {
        writeSucceeded = true;
      }
    }
  
    public void endElement (String uri, String localName,
                            String qName) throws SAXException {
      String leaving = (String)elementStack.pop();
    }
  
    public void characters(char ch[], int start, int length) {
  
      String inputString = new String(ch, start, length);
      String currentTag = (String)elementStack.peek();
      if (currentTag.equals("docid")) {
        documentID = inputString;
      }
      if (currentTag.equals("success")) {
        successMessage = inputString;
      }
      if (currentTag.equals("error")) {
        errorMessage = inputString;
      }
//      System.out.println(currentTag +":"+inputString+"\n");
    }

   public void startDocument() throws SAXException { 
     elementStack = new Stack();
     writeSucceeded = false;
   }

   public void endDocument() throws SAXException { }
   public void ignorableWhitespace(char[] cbuf, int start, int len) { }
   public void skippedEntity(String name) throws SAXException { }
   public void processingInstruction(String target, String data) throws SAXException { }
   public void startPrefixMapping(String prefix, String uri) throws SAXException { }
   public void endPrefixMapping(String prefix) throws SAXException { }
   public void setDocumentLocator (Locator locator) { }
    	

	void DeleteButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		JOptionPane.showMessageDialog(null, "Delete will remove a document having the displayed ID Number from the remote Server", "Alert", JOptionPane.INFORMATION_MESSAGE);
	    if (container.getUserName().equals("public")) {
	        JOptionPane.showMessageDialog(this,"You must be logged in as a registered user to delete data from the system catalog!");
	    }
	    else {
	        String indocid = getdocid();
	        if (indocid==null) {
	            JOptionPane.showMessageDialog(this,"ID parameters must be present!");
	        }
	        else {
	            try {
                    //System.err.println("Trying: " + container.MetaCatServletURL);
		            URL url = new URL(container.MetaCatServletURL);
		            HttpMessage msg = new HttpMessage(url);
		            Properties prop = new Properties();
		            prop.put("action","delete");
		            prop.put("public", access);
		            prop.put("docid",indocid);
		    
		    
		            InputStream in = msg.sendPostMessage(prop);
		    
        XMLReader parser = null;

        // Set up the SAX document handlers for parsing
        try {
          // Get an instance of the parser
          parser = XMLReaderFactory.createXMLReader(parserName);
          // Set the ContentHandler to this instance
          parser.setContentHandler(this);
          parser.parse(new InputSource(in));
        } catch (Exception e) {
           System.err.println(e.toString());
        }
        String message = "";
        if (writeSucceeded) {
            message = "Success: " + successMessage ;
            }
        else{
            message = "Error: " + errorMessage; 
        }
          JOptionPane.showMessageDialog(this,message);
        }

       catch (Exception e) {
        System.out.println("Error inserting to database.");
        JOptionPane.showMessageDialog(this,"Error deleting information from database");
      }
	        }
	    }		 
	}

	void UpdateButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    if (AnyUser.isSelected()) {
	       access = "yes"; 
	    }
	    else {
	       access = "no";
	    }
		JOptionPane.showMessageDialog(null, "Update will replace a document having the displayed ID Number from the remote Server", "Alert", JOptionPane.INFORMATION_MESSAGE);
	    if (container.getUserName().equals("public")) {
	        JOptionPane.showMessageDialog(this,"You must be logged in as a registered user to update data in the system catalog!");
	    }
	    else {
	        String indocid = getdocid();
	        if (indocid==null) {
	            JOptionPane.showMessageDialog(this,"Both global and local id parameters must be present!");
	        }
	        else {
		        StringBuffer txt = new StringBuffer();
	            try {
	            
		        if(CurrentCheckBox.isSelected()) {   // use the xml doc currently being edited
                            String temp = null;
		            //MBJOUTDATED//temp = container.mdeBean1.getSaveString();
		            if ((temp==null)||(temp.length()==0)) {
		                JOptionPane.showMessageDialog(this,"Unable to obtain current XML document!");
		                return;
		            }
		            txt.append(temp);
		        }
		        else{
	            
		            String file = DocumentTextBox.getText();
		            FileReader fr = new FileReader(file);
		            int x;
		            while((x=fr.read())!=-1) {
		                txt.append((char)x);
		            }
		            fr.close();
		        
	            
	            }
                    //System.err.println("Trying: " + container.MetaCatServletURL);
		            URL url = new URL(container.MetaCatServletURL);
		            HttpMessage msg = new HttpMessage(url);
		            Properties prop = new Properties();
		            prop.put("action","update");
		            prop.put("docid",indocid);
		            prop.put("public", access);
		            prop.put("doctext",txt.toString());
		    
		            InputStream in = msg.sendPostMessage(prop);
		    
        // Determine the assigned docid if insert successful
        XMLReader parser = null;

        // Set up the SAX document handlers for parsing
        try {
          // Get an instance of the parser
          parser = XMLReaderFactory.createXMLReader(parserName);
          // Set the ContentHandler to this instance
          parser.setContentHandler(this);
          parser.parse(new InputSource(in));
        } catch (Exception e) {
           System.err.println(e.toString());
        }

        if (writeSucceeded) {
   //       System.out.println("Success. The docid is " + documentID + ".");
            String global = documentID.substring(0,documentID.lastIndexOf(sepchar));
            String local =  documentID.substring(documentID.lastIndexOf(sepchar)+1,documentID.length());
            boolean change_flag = false;
            if (!globalidTextBox.getText().equals(global)) change_flag=true;
            globalidTextBox.setText(global);
            String message = "Success. The docid is " + documentID + ".";
            if (change_flag) {
                message = message + " New docid provided by server!";
            }
          JOptionPane.showMessageDialog(this,message);
        }
        else {
          JOptionPane.showMessageDialog(this,"Updating the document to the database failed.");
        }

      } catch (Exception e) {
        System.out.println("Error inserting to database.");
        JOptionPane.showMessageDialog(this,"Error updating to database.");
      }
	        }
	    }
	}
	
	
	private void saveAsTempFile(String str) {
	    StringReader sr = new StringReader(str);
        File  tempXMLFile = null;
        File tmp = new File("./tmp/");
        if (!tmp.exists()) { 
          tmp.mkdir();
        }
        tempXMLFileName = "./tmp/";
        long timeStamp = System.currentTimeMillis();
        String tempFileID = Long.toString(timeStamp) +
                            Long.toString(Runtime.getRuntime().freeMemory());
        tempXMLFileName = tempXMLFileName + tempFileID + ".xml";
        tempXMLFile = new File(tempXMLFileName);
        try {
            FileWriter fw = new FileWriter(tempXMLFile);
            int x;
		    while((x=sr.read())!=-1) {
		        fw.write(x); 
		    }
		    fw.close();
		}
		catch (Exception e) {
		    System.out.println("Error in saving temporary file");
		    }
        

	}
}
