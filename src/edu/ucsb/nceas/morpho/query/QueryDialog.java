/**
 *       Name: QueryDialog.java
 *    Purpose: Visual display for collecting query info from user
 *  Copyright: 2000 Regents of the University of California and the
 *             National Center for Ecological Analysis and Synthesis
 *    Authors: @authors@
 *    Release: @release@
 *
 *   '$Author: jones $'
 *     '$Date: 2001-05-30 23:01:24 $'
 * '$Revision: 1.12 $'
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package edu.ucsb.nceas.morpho.query;

import edu.ucsb.nceas.morpho.framework.*;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.Insets;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Date;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;

/**
 * Dialog which collects search information from user
 * to be used to create a Query
 * 
 */
public class QueryDialog extends JDialog
{
  /** A reference to the container framework */
  private ClientFramework framework = null;

  /** The configuration options object reference from the framework */
  private ConfigXML config = null;

  /** Vector of textquery panels currently displayed*/
  Vector textPanels;

  /** flag to set whether searches are case sensitive */
  boolean caseSensitive = true;

  /** default search path for title   */
  String titleSearchPath = "title";

  /** default search path for abstract   */
  String abstractSearchPath = "abstract";

  /** default search path for keyword   */
  String keywordSearchPath = "keyword";

  /** Flag, true if Metacat searches are performed for this query */
  private boolean searchMetacat = true;

  /** Flag, true if network searches are performed for this query */
  private boolean searchLocal = true;

  /** Current query built using this QueryDialog */
  private Query savedQuery;

  /** flag indicating whether the execute button was pressed */
  private boolean searchStarted = false;

  /** A static document counter for new untitled documents */
  private static int untitledCounter = 0;

  /**
   * Construct a new instance of the query dialog
   *
   * @param parent The parent frame for this dialog
   * @param framework A reference to the client framework 
   */
  public QueryDialog(Frame parent, ClientFramework framework)
  {
    super(parent);
    this.framework = framework;
    this.config = framework.getConfiguration();
    String temp = config.get("titleSearchPath", 0);
    if (temp != null) {
      titleSearchPath = temp;
    }
    temp = config.get("abstractSearchPath", 0);
    if (temp != null) {
      abstractSearchPath = temp;
    }
    temp = config.get("keywordSearchPath", 0);
    if (temp != null) {
        keywordSearchPath = temp;
    }
    String searchMetacatString = config.get("searchmetacat", 0);
    searchMetacat = (new Boolean(searchMetacatString)).booleanValue();
    String searchLocalString = config.get("searchlocal", 0);
    searchLocal = (new Boolean(searchLocalString)).booleanValue();

    untitledCounter++;

    // This code is automatically generated by Visual Cafe when you add
    // components to the visual environment. It instantiates and initializes
    // the components. To modify the code, only use code syntax that matches
    // what Visual Cafe can generate, or Visual Cafe may be unable to back
    // parse your Java file into its visual environment.
    //{{INIT_CONTROLS
    setTitle("Search");
    getContentPane().setLayout(new BorderLayout(0, 0));
    setSize(650, 375);
    setVisible(false);
    queryPanel.setLayout(new BoxLayout(queryPanel, BoxLayout.Y_AXIS));
    getContentPane().add(BorderLayout.CENTER, queryPanel);
    queryPanel.add(Box.createVerticalStrut(8));

    titlePanel.setLayout(new BoxLayout(titlePanel, BoxLayout.X_AXIS));
    titlePanel.add(Box.createHorizontalStrut(8));
    queryTitleLabel.setText("Query Title ");
    titlePanel.add(queryTitleLabel);
    titlePanel.add(Box.createHorizontalStrut(8));
    queryTitleTF.setText("Untitled-Search-" + untitledCounter);

    //Make the textfield a fixed height.
    JPanel queryTitleConstraintPanel = new JPanel() {
      public Dimension getMinimumSize() {
        return getPreferredSize();
      }
      public Dimension getPreferredSize() {
        return new Dimension(super.getPreferredSize().width, 24);
      }
      public Dimension getMaximumSize() {
        return getPreferredSize();
      }
    };

    queryTitleConstraintPanel.add(queryTitleTF);

    titlePanel.add(queryTitleConstraintPanel);
    titlePanel.add(Box.createHorizontalStrut(8));
    titlePanel.add(Box.createHorizontalGlue());
    searchChoicePanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
    catalogSearchCheckBox.setText("Catalog Search");
    catalogSearchCheckBox.setActionCommand("Catalog Search");
    catalogSearchCheckBox.setSelected(true);
    searchChoicePanel.add(catalogSearchCheckBox);
    localSearchCheckBox.setText("Local Search");
    localSearchCheckBox.setActionCommand("Local Search");
    localSearchCheckBox.setSelected(true);
    searchChoicePanel.add(localSearchCheckBox);
    titlePanel.add(searchChoicePanel);
    titlePanel.add(Box.createHorizontalStrut(8));
    queryPanel.add(titlePanel);
    queryPanel.add(Box.createVerticalStrut(8));

    queryPanel.add(queryTabs);
    subjectTextPanel.setLayout(new BorderLayout(0, 0));
    queryTabs.add(subjectTextPanel);
    subjectTextPanel.setVisible(false);
    queryScrollPanel.setOpaque(true);
    queryScrollPanel.setPreferredSize(new Dimension(
                     queryScrollPanel.getPreferredSize().width, 500 ));
    subjectTextPanel.add(BorderLayout.CENTER, queryScrollPanel);
    queryChoicesPanel.setLayout(new BoxLayout(queryChoicesPanel, 
                                              BoxLayout.Y_AXIS));
    queryScrollPanel.getViewport().add(queryChoicesPanel);
    queryChoicesPanel.setAlignmentX(0.0F);
    subjectTextControlsPanel.setLayout(new BorderLayout(0, 0));
    subjectTextPanel.add(BorderLayout.SOUTH, subjectTextControlsPanel);
    moreLessControlsPanel.setLayout(new BoxLayout(moreLessControlsPanel, 
                                                  BoxLayout.X_AXIS));
    subjectTextControlsPanel.add(BorderLayout.CENTER, moreLessControlsPanel);
    andRadioButton.setText("And");
    andRadioButton.setActionCommand("And");
    moreLessControlsPanel.add(andRadioButton);
    orRadioButton.setText("Or");
    orRadioButton.setActionCommand("Or");
    orRadioButton.setSelected(true);
    moreLessControlsPanel.add(orRadioButton);
    moreButton.setText("More");
    moreButton.setActionCommand("More");
    moreLessControlsPanel.add(moreButton);
    lessButton.setText("Fewer");
    lessButton.setActionCommand("Fewer");
    lessButton.setEnabled(false);
    moreLessControlsPanel.add(lessButton);
    moreLessControlsPanel.add(Box.createHorizontalGlue());
    otherTabsCheckBox.setText("Include Queries from Other Tabs");
    otherTabsCheckBox.setActionCommand("Include Queries from Other Tabs");
    moreLessControlsPanel.add(otherTabsCheckBox);
    taxonomicPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
    queryTabs.add(taxonomicPanel);
    taxonomicPanel.setVisible(false);
    spatialPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
    queryTabs.add(spatialPanel);
    spatialPanel.setVisible(false);
    queryTabs.setSelectedIndex(0);
    queryTabs.setSelectedComponent(subjectTextPanel);
    queryTabs.setTitleAt(0, "Subject/Text");
    queryTabs.setTitleAt(1, "Taxonomic");
    queryTabs.setTitleAt(2, "Spatial");

    queryPanel.add(Box.createVerticalStrut(8));
    controlButtonsPanel.setLayout(new BoxLayout(controlButtonsPanel,
                                  BoxLayout.X_AXIS));
    controlButtonsPanel.add(Box.createHorizontalStrut(8));
    controlButtonsPanel.add(Box.createHorizontalGlue());
    executeButton.setText("Search");
    executeButton.setActionCommand("Search");
    controlButtonsPanel.add(executeButton);
    cancelButton.setText("Cancel");
    cancelButton.setActionCommand("Cancel");
    controlButtonsPanel.add(Box.createHorizontalStrut(8));
    controlButtonsPanel.add(cancelButton);
    controlButtonsPanel.add(Box.createHorizontalStrut(8));
    queryPanel.add(controlButtonsPanel);
    queryPanel.add(Box.createVerticalStrut(8));
    //}}
    textPanels = new Vector();
    TextQueryTermPanel tqt1 = new TextQueryTermPanel();
    queryChoicesPanel.add(tqt1);
    textPanels.addElement(tqt1);
    catalogSearchCheckBox.setSelected(searchMetacat);
    localSearchCheckBox.setSelected(searchLocal);
    // do we want to set the config file each time?

    //{{REGISTER_LISTENERS
    SymAction lSymAction = new SymAction();
    moreButton.addActionListener(lSymAction);
    lessButton.addActionListener(lSymAction);
    SymItem lSymItem = new SymItem();
    andRadioButton.addItemListener(lSymItem);
    orRadioButton.addItemListener(lSymItem);
    executeButton.addActionListener(lSymAction);
    cancelButton.addActionListener(lSymAction);
    //}}
  }

  /**
   * Construct a new instance of the query dialog
   *
   * @param framework A reference to the client framework 
   */
  public QueryDialog(ClientFramework framework)
  {
    this((Frame) null, framework);
  }

  /**
   * Construct a new instance of the query dialog
   *
   * @param sTitle the title for the dialog
   * @param framework A reference to the client framework 
   */
  public QueryDialog(String sTitle, ClientFramework framework)
  {
    this(framework);
    setTitle(sTitle);
  }

  /**
   * main method for testing
   */
  static public void main(String args[])
  {
     (new QueryDialog(new ClientFramework(
          new ConfigXML("./lib/config.xml")))).setVisible(true);
  }

  /** Used by visual cafe -- but why? */
  public void addNotify()
  {
    // Record the size of the window prior to calling parents addNotify.
    Dimension size = getSize();

    super.addNotify();

    if (frameSizeAdjusted) {
      return;
    }
    frameSizeAdjusted = true;

    // Adjust size of frame according to the insets
    Insets insets = getInsets();
    setSize(insets.left + insets.right + size.width,
            insets.top + insets.bottom + size.height);
  }

  // Used by addNotify
  private boolean frameSizeAdjusted = false;

  //{{DECLARE_CONTROLS
  private JPanel titlePanel = new JPanel();
  private JPanel queryPanel = new JPanel();
  private JTabbedPane queryTabs = new JTabbedPane();
  private JPanel subjectTextPanel = new JPanel();
  private JScrollPane queryScrollPanel = new JScrollPane();
  private JPanel queryChoicesPanel = new JPanel();
  private JPanel subjectTextControlsPanel = new JPanel();
  private JPanel moreLessControlsPanel = new JPanel();
  private JRadioButton andRadioButton = new JRadioButton();
  private JRadioButton orRadioButton = new JRadioButton();
  private JButton moreButton = new JButton();
  private JButton lessButton = new JButton();
  private JCheckBox otherTabsCheckBox = new JCheckBox();
  private JPanel taxonomicPanel = new JPanel();
  private JPanel spatialPanel = new JPanel();
  private JPanel controlButtonsPanel = new JPanel();
  private JLabel queryTitleLabel = new JLabel();
  private JTextField queryTitleTF = new JTextField(20);
  private JPanel searchChoicePanel = new JPanel();
  private JCheckBox catalogSearchCheckBox = new JCheckBox();
  private JCheckBox localSearchCheckBox = new JCheckBox();
  private JButton executeButton = new JButton();
  private JButton cancelButton = new JButton();
  //}}


  /** Class to listen for ActionEvents */
  private class SymAction implements java.awt.event.ActionListener
  {
    public void actionPerformed(java.awt.event.ActionEvent event)
    {
      Object object = event.getSource();
      if (object == moreButton)
        moreButton_actionPerformed(event);
      else if (object == lessButton)
        lessButton_actionPerformed(event);
      else if (object == executeButton)
        executeButton_actionPerformed(event);
      else if (object == cancelButton)
        cancelButton_actionPerformed(event);
    }
  }

  /**
   * Performs actions associated with pressing the "More" button
   */
  private void moreButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    TextQueryTermPanel tq = new TextQueryTermPanel();
    queryChoicesPanel.add(tq);
    textPanels.addElement(tq);
    lessButton.setEnabled(true);
    queryChoicesPanel.invalidate();
    subjectTextPanel.validate();
  }

  /**
   * Performs actions associated with pressing the "Less" button
   */
  private void lessButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    Component comp = (Component) textPanels.lastElement();
      queryChoicesPanel.remove(comp);
      textPanels.removeElementAt(textPanels.size() - 1);
    if (textPanels.size() < 2)
        lessButton.setEnabled(false);
      queryChoicesPanel.invalidate();
      subjectTextPanel.validate();
  }

  /**
   * Class that listens for state changes
   */
  private class SymItem implements java.awt.event.ItemListener
  {
    public void itemStateChanged(java.awt.event.ItemEvent event)
    {
      Object object = event.getSource();
      if (object == andRadioButton)
        andRadioButton_itemStateChanged(event);
      else if (object == orRadioButton)
        orRadioButton_itemStateChanged(event);
    }
  }

  /**
   * Performs actions associated with a state change for the "And" button
   */
  private void andRadioButton_itemStateChanged(java.awt.event.ItemEvent event)
  {
    if (andRadioButton.isSelected())
    {
      orRadioButton.setSelected(false);
    }
  }

  /**
   * Performs actions associated with a state change for the "Or" button
   */
  private void orRadioButton_itemStateChanged(java.awt.event.ItemEvent event)
  {
    if (orRadioButton.isSelected())
    {
      andRadioButton.setSelected(false);
    }
  }

  /** 
   * method to constuct a Query from the dialog tabs
   */
  private Query buildQuery()
  {
    // Create the Query object
    Query newQuery = new Query(framework);

    // Set top level query params
    if (queryTitleTF.getText().length() < 1) {
      queryTitleTF.setText(new Date().toString());
    }
    newQuery.setQueryTitle(queryTitleTF.getText());
    newQuery.setSearchMetacat(catalogSearchCheckBox.isSelected());
    newQuery.setSearchLocal(localSearchCheckBox.isSelected());

    // Add a query group that combines the tabs (always INTERSECT)
    QueryGroup rootQG = new QueryGroup("INTERSECT");
    newQuery.setQueryGroup(rootQG);

    // Add a child query group for each panel
    QueryGroup subjectGroup = buildSubjectQueryGroup();
    rootQG.addChild(subjectGroup);

    return newQuery;
  }

  /** 
   * method to constuct a QueryGroup for the subject panel of the dialog
   */
  private QueryGroup buildSubjectQueryGroup()
  {
    String path = "//*";
    String op = "UNION";
    String value = "*";
    String mode = "contains";

    // Add a query group for the overall Subject tab
    if (orRadioButton.isSelected()) {
      op = "UNION";
    } else {
      op = "INTERSECT";
    }
    QueryGroup subjectGroup = new QueryGroup(op);

    // For each subject constraint, add a query group
    Enumeration enum = textPanels.elements();
    while (enum.hasMoreElements())
    {
      TextQueryTermPanel tqtp = (TextQueryTermPanel) enum.nextElement();
      // Create a separate QG for each textPanel (always INTERSECT)
      QueryGroup termGroup = new QueryGroup("UNION");
      subjectGroup.addChild(termGroup);

      if (tqtp.getAllState())
      { // All button selected; single query term
        path = "//*";
        value = tqtp.getValue();
        mode = tqtp.getSearchMode();
        QueryTerm allTerm = new QueryTerm(caseSensitive, mode, value);
        termGroup.addChild(allTerm);
      }
      else
      { // check other button choices; multiple queries possible
        value = tqtp.getValue();
        mode = tqtp.getSearchMode();
        if (tqtp.getTitleState()) {
          path = titleSearchPath;
          QueryTerm newTerm = new QueryTerm(caseSensitive, mode, value, path);
          termGroup.addChild(newTerm);
        }
        if (tqtp.getAbstractState()) {
          path = abstractSearchPath;
          if (!value.equals("")) {
            QueryTerm newTerm = new QueryTerm(caseSensitive, mode, value, path);
            termGroup.addChild(newTerm);
          }
        }
        if (tqtp.getKeyWordsState()) {
          path = keywordSearchPath;
          QueryTerm newTerm = new QueryTerm(caseSensitive, mode, value, path);
          termGroup.addChild(newTerm);
        }
      }
    }

    return subjectGroup;
  }

  /**
   * Save the query when the execute button is set, making it accessible to
   * the getQuery() method
   */
  private void executeButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    savedQuery = buildQuery();
    searchStarted = true;
    setVisible(false);
  }

  /**
   * Close the dialog when the cancel button is pressed
   */
  private void cancelButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    searchStarted = false;
    setVisible(false);
  }

  /**
   * determine whether the query should be executed
   */
  public boolean isSearchStarted() 
  {
    return searchStarted;
  }

  /**
   * Get the Query built using this dialog box
   */
  public Query getQuery()
  {
    return this.savedQuery;
  }

  /**
   * Set the query that should be displayed and edited in the dialog
   */
  public void setQuery(Query query)
  {
    this.savedQuery = query;

    queryTitleTF.setText(query.getQueryTitle());
    // Now refill all of the screen widgets with the query info
    framework.debug(9, "Warning: setQuery implementation not complete!");
    QueryGroup rootGroup = savedQuery.getQueryGroup();
    initializeSubjectSearch(rootGroup);
  }

  /**
   * Fill in the fields in the subject query with the proper values from
   * a QueryGroup
   */
  private void initializeSubjectSearch(QueryGroup rootGroup) 
  {
    // Remove any existing text panels
    for (int i = 0;  i < textPanels.size();  i++) {
      Component comp = (Component) textPanels.lastElement();
      queryChoicesPanel.remove(comp);
      textPanels.removeElementAt(textPanels.size() - 1);
    }

    // Find the QueryGroup containing the subject parameters
    Enumeration rootChildren = rootGroup.getChildren();

    // Find the group with the subject info (this is too simplistic for later
    // when taxon and spatial searches are added)
    QueryGroup subjectGroup = (QueryGroup)rootChildren.nextElement();

    // Set the And/Or button from operator param in the Subject group
    String op = subjectGroup.getOperator();
    if (op.equalsIgnoreCase("INTERSECT")) {
      orRadioButton.setSelected(false);
      andRadioButton.setSelected(true);
    } else {
      orRadioButton.setSelected(true);
      andRadioButton.setSelected(false);
    }

    // Create a textPanel for each group in the subject group
    Enumeration subjectChildren = subjectGroup.getChildren();
    while (subjectChildren.hasMoreElements()) {

      Object obj = subjectChildren.nextElement();
      framework.debug(9, "Class instance is: " + obj.getClass().getName());

      // Create the panel for this subject term, and set defaults
      TextQueryTermPanel tq = new TextQueryTermPanel();
      tq.setAllState(true);
      tq.setTitleState(false);
      tq.setAbstractState(false);
      tq.setKeyWordsState(false);

      try {
        // Process each subject query group and make a text panel out of it
        // By getting the params out of the contained QueryTerms
        QueryGroup termsGroup = (QueryGroup)obj;
        Enumeration qtList = termsGroup.getChildren();
  
        // Step through the QueryTerms and extract parameters
        while (qtList.hasMoreElements()) {
          Object obj2 = qtList.nextElement();
          framework.debug(9, "Term class instance is: " +
                        obj2.getClass().getName());
          QueryTerm qt = (QueryTerm)obj2;
    
          tq.setValue(qt.getValue());
          tq.setSearchMode(qt.getSearchMode());
          String pathExpression = qt.getPathExpression();
          if (pathExpression == null) {
            tq.setAllState(true);
          } else {
            tq.setAllState(false);
            if (pathExpression.equals(titleSearchPath)) {
              tq.setTitleState(true);
            } else if (pathExpression.equals(abstractSearchPath)) {
              tq.setAbstractState(true);
            } else if (pathExpression.equals(keywordSearchPath)) {
              tq.setKeyWordsState(true);
            }
          }
        }
      } catch (ClassCastException cce) {
        framework.debug(3, "Query doesn't meet expectations, " +
                        "so couldn't rebuild dialog correctly!");
        tq = new TextQueryTermPanel();
        tq.setAllState(true);
      }

      // Add the text panel to the dialog
      queryChoicesPanel.add(tq);
      textPanels.addElement(tq);
    }
    if (textPanels.size() < 2) {
      lessButton.setEnabled(false);
    } else {
      lessButton.setEnabled(true);
    }

    // Force the window to redraw
    queryChoicesPanel.invalidate();
    subjectTextPanel.validate();
  }
}
