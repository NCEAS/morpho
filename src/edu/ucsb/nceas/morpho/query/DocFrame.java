/**
 *        Name: DocFrame.java
 *     Purpose: A Class for creating Displaying a specific document
 *   Copyright: 2000 Regents of the University of California and the
 *              National Center for Ecological Analysis and Synthesis
 *     Authors: Dan Higgins
 *
 *     Version: '$Id: DocFrame.java,v 1.8 2000-09-25 20:01:36 higgins Exp $'
 */


package edu.ucsb.nceas.querybean;

import java.awt.*;
import javax.swing.*;
import java.net.URL;
import java.io.*;
import com.arbortext.catalog.*;
import org.xml.sax.SAXException;
import org.apache.xalan.xslt.XSLTProcessorFactory;
import org.apache.xalan.xslt.XSLTInputSource;
import org.apache.xalan.xslt.XSLTResultTarget;
import org.apache.xalan.xslt.XSLTProcessor;
import org.apache.xalan.xpath.xml.*;
import java.util.PropertyResourceBundle;
import javax.swing.*;
import javax.swing.tree.*;

import org.xml.sax.*;
import org.xml.sax.helpers.*;
import java.util.Hashtable;


public class DocFrame extends javax.swing.JFrame
{
    File file;
    String XMLTextString;
    String doctype = null;
    public MyDefaultTreeModel treeModel;
    public DefaultMutableTreeNode rootNode;
    DefaultMutableTreeNode selectedNode;
    public JTree tree;
    private boolean transform_flag = true;
    static public Hashtable ht;
    
    static {
        ht = new Hashtable();
        ht.put("eml-dataset" , "eml-dataset-display.xsl");
//        ht.put("eml-file" , "eml-file-display.xsl");
//        ht.put("eml-variable" , "eml-variable-display.xsl");
//        ht.put("eml-access" , "eml-dataset-display.xsl");
        
    }
    
	public DocFrame()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(405,305);
		setVisible(false);
		DocControlPanel.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		getContentPane().add(BorderLayout.NORTH,DocControlPanel);
		DocControlPanel.setBounds(0,0,405,35);
		JTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
		getContentPane().add(BorderLayout.CENTER,JTabbedPane1);
		JTabbedPane1.setBounds(0,35,405,270);
		JScrollPane1.setOpaque(true);
		JTabbedPane1.add(JScrollPane1);
		JScrollPane1.setBounds(2,2,400,240);
		JScrollPane1.setVisible(false);
		JScrollPane1.getViewport().add(XMLText);
		XMLText.setBounds(0,0,397,237);
		JScrollPane2.setOpaque(true);
		JTabbedPane1.add(JScrollPane2);
		JScrollPane2.setBounds(2,2,400,240);
		JScrollPane2.setVisible(false);
		JScrollPane2.getViewport().add(HTMLPane);
		HTMLPane.setBounds(0,0,397,237);
		JPanel1.setLayout(new BorderLayout(0,0));
		JTabbedPane1.add(JPanel1);
		JPanel1.setBounds(2,2,400,240);
		JPanel1.setVisible(false);
		JPanel1.add(BorderLayout.WEST,OutputScrollPanel);
		OutputScrollPanel.setBounds(0,0,3,240);
		JPanel1.add(BorderLayout.CENTER,NestedPanelScrollPanel);
		NestedPanelScrollPanel.setBounds(3,0,397,240);
		JTabbedPane1.setSelectedComponent(JScrollPane1);
		JTabbedPane1.setSelectedIndex(0);
		JTabbedPane1.setTitleAt(0,"Text");
		JTabbedPane1.setTitleAt(1,"HTML");
		JTabbedPane1.setTitleAt(2,"Tree");
		//}}

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		SymChange lSymChange = new SymChange();
		JTabbedPane1.addChangeListener(lSymChange);
		//}}
		rootNode = newNode("root");
		treeModel = new MyDefaultTreeModel(rootNode);

        tree = new JTree(treeModel);
		OutputScrollPanel.getViewport().add(tree);
    	tree.setCellRenderer(new MyDisplayRenderer());
		
		tree.setShowsRootHandles(true);
        tree.setEditable(false);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree.setShowsRootHandles(true);
        tree.putClientProperty("JTree.lineStyle", "Angled");
		
		SymTreeSelection lSymTreeSelection = new SymTreeSelection();
		tree.addTreeSelectionListener(lSymTreeSelection);
	}

	public DocFrame(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	public DocFrame(String sTitle, String doctext)
	{
		this();
		setTitle(sTitle);
		XMLTextString = doctext;
		XMLText.setText(doctext);
		putXMLintoTree();
        JTabbedPane1.setSelectedIndex(2);
	}
	
	public DocFrame(File file)
	{
	    this();
	    this.file = file;
	}
	
	public void setFile(File f) {
	    file = f;
	}
	
	public void setDoctype(String doctype) {
	    this.doctype = doctype;
	}   

	public void setVisible(boolean b)
	{
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new DocFrame()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JPanel DocControlPanel = new javax.swing.JPanel();
	javax.swing.JTabbedPane JTabbedPane1 = new javax.swing.JTabbedPane();
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	javax.swing.JTextArea XMLText = new javax.swing.JTextArea();
	javax.swing.JScrollPane JScrollPane2 = new javax.swing.JScrollPane();
	javax.swing.JEditorPane HTMLPane = new javax.swing.JEditorPane();
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JScrollPane OutputScrollPanel = new javax.swing.JScrollPane();
	javax.swing.JScrollPane NestedPanelScrollPanel = new javax.swing.JScrollPane();
	//}}

	//{{DECLARE_MENUS
	//}}
	
	
public void writeInfo() {
    try{
    FileReader in = new FileReader(file);
    StringWriter out = new StringWriter();
    int c;
    while ((c = in.read()) != -1) {
        out.write(c);
        }
        in.close();
        out.close();
        XMLTextString = out.toString();
    XMLText.setText(out.toString());
		putXMLintoTree();
        JTabbedPane1.setSelectedIndex(2);
    
    }
	catch (Exception e) {;}
    
    }

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
		}
	}

	void TransformToHTML()
	{
                CatalogEntityResolver cer = new CatalogEntityResolver();
            	PropertyResourceBundle options = (PropertyResourceBundle)PropertyResourceBundle.getBundle("client");  // DFH
            	String local_dtd_directory =(String)options.handleGetObject("local_dtd_directory");     // DFH
            	String local_xml_directory =(String)options.handleGetObject("local_xml_directory");     // DFH
            
            	String xmlcatalogfile = local_dtd_directory+"/catalog"; 
               // String xmlcatalogfile = "./catalog/catalog"; 
                
                try {
                    Catalog myCatalog = new Catalog();
                    myCatalog.loadSystemCatalogs();
                    myCatalog.parseCatalog(xmlcatalogfile);
                    cer.setCatalog(myCatalog);
                }
        catch (Exception e) {System.out.println("Problem creating Catalog!");}
	    
	try{
    // Have the XSLTProcessorFactory obtain a interface to a
    // new XSLTProcessor object.
    StringReader sr = null;
    if (XMLTextString!=null) {
        sr = new StringReader(XMLTextString);
    }
    XSLTProcessor processor = XSLTProcessorFactory.getProcessor();
    XMLParserLiaison pl = processor.getXMLProcessorLiaison();
    pl.setEntityResolver(cer);

    // Have the XSLTProcessor processor object transform "foo.xml" to
    // System.out, using the XSLT instructions found in "foo.xsl".
//    processor.process(new XSLTInputSource("file:///"+file.getCanonicalPath()),
    XSLTInputSource trans = null;
    trans = new XSLTInputSource("XML.xsl");    // default
    if (doctype!=null) {
        if (ht.get(doctype)!=null) {
            trans = new XSLTInputSource((String)ht.get(doctype));
        }
    }
        
    processor.process(new XSLTInputSource(sr),
                      trans,
                      new XSLTResultTarget("html.out"));
    File html = new File("html.out");
    HTMLPane.setPage("file:///"+html.getAbsolutePath());
    JTabbedPane1.setSelectedIndex(1);
    }
    catch (Exception w) {}
	}
		
void putXMLintoTree() {
    if (XMLTextString!=null) {
          CatalogEntityResolver cer = new CatalogEntityResolver();
          PropertyResourceBundle options = (PropertyResourceBundle)PropertyResourceBundle.getBundle("client");  // DFH
          String local_dtd_directory =(String)options.handleGetObject("local_dtd_directory");     // DFH
          String local_xml_directory =(String)options.handleGetObject("local_xml_directory");     // DFH
            
          String xmlcatalogfile = local_dtd_directory+"/catalog"; 
          try {
               Catalog myCatalog = new Catalog();
               myCatalog.loadSystemCatalogs();
               myCatalog.parseCatalog(xmlcatalogfile);
               cer.setCatalog(myCatalog);
                }
        catch (Exception e) {System.out.println("Problem creating Catalog!");}
        try {
            StringReader sr = new StringReader(XMLTextString);
            String parserName = "org.apache.xerces.parsers.SAXParser";
            XMLReader parser = null;
          // Get an instance of the parser
            parser = XMLReaderFactory.createXMLReader(parserName);
            myDisplayHandler mh = new myDisplayHandler(treeModel);
            parser.setContentHandler(mh);
	    parser.setEntityResolver(cer);
            parser.parse(new InputSource(sr));
            DefaultMutableTreeNode rt = (DefaultMutableTreeNode)treeModel.getRoot();
            doctype = ((NodeInfo)rt.getUserObject()).toString();
            } catch (Exception e) { 
           System.err.println(e.toString());
        }
    }
}

	public DefaultMutableTreeNode newNode (Object name) {
	    NodeInfo ni = new NodeInfo(name.toString());
	    DefaultMutableTreeNode node = new DefaultMutableTreeNode(ni);
	    return node;
	}
	
	class SymTreeSelection implements javax.swing.event.TreeSelectionListener
	{
		public  void valueChanged(javax.swing.event.TreeSelectionEvent event)
		{
			Object object = event.getSource();
			if (object == tree)
				tree_valueChanged(event);
		}
	}

	 void tree_valueChanged(javax.swing.event.TreeSelectionEvent event)
	{
	    TreePath tp = event.getNewLeadSelectionPath();
	    if (tp!=null) {
	    Object ob = tp.getLastPathComponent();
	    DefaultMutableTreeNode node = null;
	    if (ob!=null) {node =(DefaultMutableTreeNode)ob;}
         
         XMLPanels xp = new XMLPanels(node);
         xp.setTreeModel(treeModel);
         NestedPanelScrollPanel.getViewport().add(xp.topPanel);
		}
		
		
	}  

	class SymChange implements javax.swing.event.ChangeListener
	{
		public void stateChanged(javax.swing.event.ChangeEvent event)
		{
			Object object = event.getSource();
			if (object == JTabbedPane1)
				JTabbedPane1_stateChanged(event);
		}
	}

	void JTabbedPane1_stateChanged(javax.swing.event.ChangeEvent event)
	{
		if((JTabbedPane1.getSelectedIndex()==1)&&(transform_flag)) {
		    TransformToHTML();
		    transform_flag=false;
		}
			 
	}
}