/**
 *  '$RCSfile: MetaDisplay.java,v $'
 *  Copyright: 2000 Regents of the University of California and the
 *              National Center for Ecological Analysis and Synthesis
 *    Authors: @authors@
 *    Release: @release@
 *
 *   '$Author: brooke $'
 *     '$Date: 2002-08-21 03:26:06 $'
 * '$Revision: 1.3 $'
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package edu.ucsb.nceas.morpho.plugins.metadisplay;

import java.io.Reader;
import java.io.IOException;

import java.util.Vector;

import java.awt.Component;
import java.awt.event.ActionListener;

import javax.swing.JLabel;

import edu.ucsb.nceas.morpho.util.XMLTransformer;

import edu.ucsb.nceas.morpho.util.IOUtil;

import edu.ucsb.nceas.morpho.plugins.MetaDisplayInterface;
import edu.ucsb.nceas.morpho.plugins.MetaDisplayFactoryInterface;
import edu.ucsb.nceas.morpho.plugins.XMLFactoryInterface;
import edu.ucsb.nceas.morpho.plugins.DocumentNotFoundException;
import edu.ucsb.nceas.morpho.plugins.PluginInterface;
import edu.ucsb.nceas.morpho.plugins.ServiceProvider;
import edu.ucsb.nceas.morpho.exception.NullArgumentException;

import edu.ucsb.nceas.morpho.util.Log;

/**
 *  Top-level controller/Mediator class for an instance of a metadata display 
 *  panel.
 */
public class MetaDisplay implements MetaDisplayInterface                                          
{
//  * * * * * * * C L A S S    V A R I A B L E S * * * * * * *

    private final   MetaDisplayUI           display;
    private final   XMLTransformer          transformer;
    private final   History                 history;
    private final   Vector                  listenerList;
    private         XMLFactoryInterface     factory;
    private         String                  identifier;

    
    /**
     *  constructor
     */
    public MetaDisplay()
    {
        listenerList    = new Vector();
        display         = new MetaDisplayUI();
        transformer     = new XMLTransformer();
        history         = new History();
    }

    /**
     *  method used to obtain a visual component (a descendent of 
     *  <code>java.awt.Component</code>, which will display the XML resource 
     *  identified by the <code>identifier</code> parameter.
     *
     *  @param identifier   a unique identifier used to determine what resource 
     *                      to return 
     *
     *  @param factory      an instance of a class that implements 
     *                      <code>XMLFactoryInterface</code> to enable this obj
     *                      to obtain the actual XML document to display, given 
     *                      the <code>identifier</code> parameter
     *
     *  @param listener     an <code>ActionListener</code> to be notified of all 
     *                      events generated by this obj
     *
     *  @return             a visual component (a descendent of 
     *                      <code>java.awt.Component</code>, which will display 
     *                      the XML resource identified by the 
     *                      <code>identifier</code> parameter.
     *
     *  @throws DocumentNotFoundException if id does not point to a document, or
     *          if requested document exists but cannot be accessed.
     *  @throws NullArgumentException if XML Factory is null.
     */
    public Component getDisplayComponent(   String identifier,
                                            XMLFactoryInterface factory,
                                            ActionListener listener )
                                            throws  NullArgumentException, 
                                                    DocumentNotFoundException
    {
        //set ID and add to history
        try  {
            setIdentifier(identifier);
        } catch (NullArgumentException nae) {
            Log.debug(12, "NullArgumentException setting identifier: "
                                            +identifier+"; "+nae.getMessage());
            DocumentNotFoundException dnfe 
                =  new DocumentNotFoundException("Nested NullArgumentException:"
                                                                          +nae);
            dnfe.fillInStackTrace();
            throw dnfe;
        }
        
        //set XML factory
        setFactory(factory);
        
        //add ActionListener to list
        addActionListener(listener);
        
        Reader reader = factory.openAsReader(identifier);

        display.setHTML(getAsString(reader));
        return display;
    }

    //
    private String getAsString(Reader reader) throws DocumentNotFoundException
    {
        String doc = null;
        try {
            doc = IOUtil.getAsStringBuffer(reader).toString();
        } catch (IOException ioe) {
            Log.debug(12, "Error reading reader "+ioe.getMessage());
            DocumentNotFoundException dnfe =  new DocumentNotFoundException(
             "MetaDisplay.getAsString() - Nested IOException " + ioe);
            dnfe.fillInStackTrace();
            throw dnfe;
        }
        return doc;
    }
    
    
    
    /**
     *  method to display metadata in an existing instance of a visual component 
     *  (metadata identified by the <code>identifier</code> parameter).
     *
     *  @param identifier   a unique identifier used to determine what resource 
     *                      to return 
     *
     *  @throws DocumentNotFoundException if id does not point to a document, or
     *          if requested document exists but cannot be accessed.
     */
    public void display(String identifier) throws DocumentNotFoundException
    {
        //set ID and add to history
        try  {
            setIdentifier(identifier);
        } catch (NullArgumentException nae) {
            Log.debug(12, "NullArgumentException setting identifier: "
                                            +identifier+"; "+nae.getMessage());
            DocumentNotFoundException dnfe 
                =  new DocumentNotFoundException("Nested NullArgumentException:"
                                                                          +nae);
            dnfe.fillInStackTrace();
            throw dnfe;
        }
        Reader reader = factory.openAsReader(identifier);
        display.setHTML(getAsString(reader));
    }
  
    /**
     *  method to display metadata in an existing instance of a visual component 
     *  (metadata is provided as a Reader (the "XMLDocument" parameter), and a 
     *  required corresponding unique <code>identifier</code> parameter) that 
     *  can subsequently be used by this component to get the latest instance of 
     *  the same "XMLDocument" from the XMLFactoryInterface.
     *
     *  @param identifier   a unique identifier that can subsequently be used by 
     *                      this component to get the latest instance of the 
     *                      same "XMLDocument" from the XMLFactoryInterface
     *
     *  @param XMLDocument  a Reader for the character-based XML document
     * 
     *  @throws NullArgumentException if id not provided.
     *  @throws DocumentNotFoundException if Reader cannot be read.
     */
    public void display(String identifier, Reader XMLDocument) 
                                            throws  NullArgumentException, 
                                                    DocumentNotFoundException
    {
        if (XMLDocument==null) {
            DocumentNotFoundException dnfe =  new DocumentNotFoundException(
                    "MetaDisplay.display() - received NULL XMLDocument Reader");
            dnfe.fillInStackTrace();
            throw dnfe;
        }
        //set ID and add to history
        setIdentifier(identifier);
        display.setHTML(getAsString(XMLDocument));
    }
                                          
    /**
     *  method to redisplay the current metadata, by re-obtaining the latest 
     *  instance of the XML document from the XMLFactoryInterface and re-styling 
     *  it
     *
     *  @throws DocumentNotFoundException if id does not point to a document, or
     *          if requested document exists but cannot be accessed.
     */
    public void redisplay() throws DocumentNotFoundException
    {
    }
  
    /**
     *  Register a <code>java.awt.event.ActionListener</code> to listen for 
     *  events
     *
     *  @param listener  
     */
    public void addActionListener(ActionListener    listener)
    {
        if (listener==null) {
            return;
        } else  {
            listenerList.add(listener);
        }
    }
  
    /**
     *  Remove this <code>java.awt.event.ActionListener</code> from the list of 
     *  registered listeners
     *
     *  @param listener
     */
    public void removeActionListener(ActionListener listener)
    {
    }

	
	/**
	 *  Get the current XML factory, used to resolve IDs into XML documents 
	 *
	 *  @return factory     an instance of a class that implements 
	 *                      <code>XMLFactoryInterface</code> to enable this obj
	 *                      to obtain the actual XML document to display, given 
	 *                      the <code>identifier</code> parameter
	 *
	 */
	public XMLFactoryInterface getFactory()
	{
		return this.factory;
	}

    
	/**
	 *  Set the current XML factory, used to resolve IDs into XML documents 
	 *
	 *  @param factory      an instance of a class that implements 
	 *                      <code>XMLFactoryInterface</code> to enable this obj
	 *                      to obtain the actual XML document to display, given 
	 *                      the <code>identifier</code> parameter
	 *
	 *  @throws NullArgumentException if factory not provided.
	 */
	public void setFactory(XMLFactoryInterface factory) 
                                                    throws NullArgumentException
	{
        if (factory!=null)  {
		    this.factory = factory;
        } else  {
            NullArgumentException iae 
                    = new NullArgumentException("XML Factory may not be null");
            iae.fillInStackTrace();
            throw iae;            
        }
	}

	
	private String getIdentifier()
	{
		return this.identifier;
	}

    //sets ID and adds it to history
	private void setIdentifier(String identifier) throws NullArgumentException
	{
        if (identifier == null || identifier.trim().equals("")) {
		    NullArgumentException nae 
		        = new NullArgumentException("identifier must have a value");
		    nae.fillInStackTrace();
		    throw nae;
		} else  {
		    this.identifier = identifier;
            history.add(this.identifier);
		}
	}
}


