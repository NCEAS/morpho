/**
 *  '$RCSfile: MetaDisplay.java,v $'
 *  Copyright: 2000 Regents of the University of California and the
 *              National Center for Ecological Analysis and Synthesis
 *    Authors: @authors@
 *    Release: @release@
 *
 *   '$Author: brooke $'
 *     '$Date: 2002-08-19 18:59:45 $'
 * '$Revision: 1.1 $'
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package edu.ucsb.nceas.morpho.plugins.metadisplay;

import java.io.Reader;

import java.util.Stack;

import java.awt.Component;
import java.awt.event.ActionListener;

import javax.swing.JLabel;

import edu.ucsb.nceas.morpho.util.XMLTransformer;

import edu.ucsb.nceas.morpho.plugins.MetaDisplayInterface;
import edu.ucsb.nceas.morpho.plugins.MetaDisplayFactoryInterface;
import edu.ucsb.nceas.morpho.plugins.XMLFactoryInterface;
import edu.ucsb.nceas.morpho.plugins.DocumentNotFoundException;

import edu.ucsb.nceas.morpho.framework.ClientFramework;
import edu.ucsb.nceas.morpho.framework.PluginInterface;
import edu.ucsb.nceas.morpho.framework.ServiceProvider;


/**
 *  Top-level controller/Mediator class for an instance of a metadata display 
 *  panel.
 */
public class MetaDisplay implements MetaDisplayInterface                                          
{
//  * * * * * * * C L A S S    V A R I A B L E S * * * * * * *

    private final MetaDisplayUI   display;
    private final XMLTransformer    transformer;
    private final Stack             history;

    
    /**
     *  constructor
     */
    public MetaDisplay()
    {
        display     = new MetaDisplayUI();
        transformer = new XMLTransformer();
        history     = new Stack();
    }

    /**
     *  method used to obtain a visual component (a descendent of 
     *  <code>java.awt.Component</code>, which will display the XML resource 
     *  identified by the <code>identifier</code> parameter.
     *
     *  @param identifier   a unique identifier used to determine what resource 
     *                      to return 
     *
     *  @param factory      an instance of a class that implements 
     *                      <code>XMLFactoryInterface</code> to enable this obj
     *                      to obtain the actual XML document to display, given 
     *                      the <code>identifier</code> parameter
     *
     *  @param listener     an <code>ActionListener</code> to be notified of all 
     *                      events generated by this obj
     *
     *  @return             a visual component (a descendent of 
     *                      <code>java.awt.Component</code>, which will display 
     *                      the XML resource identified by the 
     *                      <code>identifier</code> parameter.
     *
     *  @throws DocumentNotFoundException if id does not point to a document, or
     *          if requested document exists but cannot be accessed.
     */
    public Component getDisplayComponent(   String identifier,
                                            XMLFactoryInterface factory,
                                            ActionListener listener )
                                            throws DocumentNotFoundException
    {
        return new JLabel("Not Yet Implemented");
    }

    /**
     *  method to display metadata in an existing instance of a visual component 
     *  (metadata identified by the <code>identifier</code> parameter).
     *
     *  @param identifier   a unique identifier used to determine what resource 
     *                      to return 
     *
     *  @throws DocumentNotFoundException if id does not point to a document, or
     *          if requested document exists but cannot be accessed.
     */
    public void display(String identifier)  throws DocumentNotFoundException
    {
    }
  
    /**
     *  method to display metadata in an existing instance of a visual component 
     *  (metadata is provided as a Reader (the "XMLDocument" parameter), and a 
     *  required corresponding unique <code>identifier</code> parameter) that 
     *  can subsequently be used by this component to get the latest instance of 
     *  the same "XMLDocument" from the XMLFactoryInterface.
     *
     *  @param identifier   a unique identifier that can subsequently be used by 
     *                      this component to get the latest instance of the 
     *                      same "XMLDocument" from the XMLFactoryInterface
     *
     *  @param XMLDocument  a Reader for the character-based XML document
     * 
     *  @throws DocumentNotFoundException if id does not point to a document, or
     *          if requested document exists but cannot be accessed.
     */
    public void display(String identifier, Reader XMLDocument) 
                                          throws DocumentNotFoundException
    {
    }
                                          
    /**
     *  method to redisplay the current metadata, by re-obtaining the latest 
     *  instance of the XML document from the XMLFactoryInterface and re-styling 
     *  it
     *
     *  @throws DocumentNotFoundException if id does not point to a document, or
     *          if requested document exists but cannot be accessed.
     */
    public void redisplay() throws DocumentNotFoundException
    {
    }
  
    /**
     *  Register a <code>java.awt.event.ActionListener</code> to listen for 
     *  events
     *
     *  @param listener  
     */
    public void addActionListener(ActionListener    listener)
    {
    }
  
    /**
     *  Remove this <code>java.awt.event.ActionListener</code> from the list of 
     *  registered listeners
     *
     *  @param listener
     */
    public void removeActionListener(ActionListener listener)
    {
    }
}
