<!--
  * Ecological Metadata Language (EML) - Data set variable descriptors
  *
  *      Authors: Matt Jones, Zheng Wang, and Noah Goldstein
  * Organization: National Center for Ecological Analysis and Synthesis
  *  For Details: http://www.nceas.ucsb.edu/
  *      Created: 1997 August 19
  *     Modified: 1999 June 23
  *      Version: 1.4
  *    File Info: '$Id: eml-variable.dtd,v 1.1 2000-07-12 19:47:20 higgins Exp $'
  *
  * Ecological Metadata Language is a general purpose metadata content
  * specification for documenting ecological data.  The specification 
  * consists of a series of modular document type definitions (DTD) that 
  * provide metadata content descriptors. It describes the owner and  
  * contents of the dataset  (eml-dataset.dtd), the research context in 
  * which it was created (eml-context.dtd), the structural 
  * characteristics of data files (eml-file.dtd), the 
  * characteristics of variables in a file (eml-variable.dtd), current 
  * status of data and metadata files (eml-status.dtd), access control 
  * rules regarding the data  and metadata (eml-access.dtd), software 
  * information (eml-software) and a variety of miscellaneous 
  * supplemental descriptors (eml-supplement.dtd).
  * 
  * Files generated under the structural constraints of eml are
  * plain-text files and therefore are editable in ordinary
  * text-processors.  However, these DTDs are intended for use within 
  * general purpose metadata editors, and within a more specific 
  * metadata editor being developed at NCEAS for the ecological 
  * community.  This metadata editor will provide facilities for 
  * version control and efficient metadata entry.  
  * The purpose of this specification was to formalize the 
  * Michener et al. work in a structured language to examine its 
  * application to ecological data in a controlled manner.
  *
  * This specification was based on the work of the Ecological Society 
  * of America's Committee on the Future of Long Term Data, and more
  * specifically on a related paper, Michener et al., 1997. See:
  * Michener, William K., et al., 1997. Ecological Appications,
  * "Nongeospatial metadata for the ecological sciences"
  * Vol 7(1). pp. 330-342.
  *
  * Where appropriate, we have used elements of the ISO/TC 211 draft 
  * standard - the ISO Geographic information/Geomatics standard, 
  * which includes xml code, as well as ISO 8601 schema. Some elements 
  * in the ISO/TC 211 were expanded to allow for greater 
  * resolution.
  *
  * For an explanation of the classes of metadata and elements defined 
  * below, see Michener et al. 1997. In particular, the numbered comment 
  * labels found below refer to Table 1 (pp. 336-337) of Michener 
  * et al. 1997. In addition, each of the principal elements in the 
  * specification is accompanied by a FIXED attribute called "description"
  * that provides a brief description of the content of the element. These
  * descriptions are derived from Michener et al. 1997.
  *
-->

<!--    *      *      *      *
        CLASS IV B - VARIABLE DESCRIPTORS
        *      *      *      *
        -->

<!-- Class 4 B -->
<!ELEMENT eml-variable (meta_file_id, variable*)>
<!ATTLIST eml-variable description CDATA #FIXED "Variable description for a file">

<!ELEMENT meta_file_id (#PCDATA)>
<!ATTLIST meta_file_id description CDATA #FIXED "Unique identifier of this metadata record">

<!ELEMENT variable (variable_name, variable_definition, unit?, storage_type?,
                    code_definition* , numeric_range* , missing_value_code*,
                    precision?, field_format?)>
<!ATTLIST variable description CDATA #FIXED "Variable information">
<!ELEMENT unit (#PCDATA) >
<!ATTLIST unit description CDATA #FIXED "Unit">

<!-- Class 4.B.1 -->
<!ELEMENT variable_name (#PCDATA) >
<!ATTLIST variable_name description CDATA #FIXED "Unique variable name or code">

<!-- Class 4.B.2 -->
<!ELEMENT variable_definition (#PCDATA)>
<!ATTLIST variable_definition description CDATA #FIXED "Precise definition of variables in data set">

<!-- Class 4.B.3 - see 4.A.2 -->

<!-- Class 4.B.4.a -->
<!ELEMENT storage_type (#PCDATA) >
<!ATTLIST storage_type description CDATA #FIXED "Storage type; Integer, floating point, character, string">

<!-- Class 4.B.4.b -->
<!ELEMENT code_definition (code, definition) >
<!ATTLIST code_definition description CDATA #FIXED "Description of any codes associated with variables">
<!ELEMENT code (#PCDATA) >
<!ATTLIST code description CDATA #FIXED "Code">
<!ELEMENT definition (#PCDATA) >
<!ATTLIST definition description CDATA #FIXED "List and definition of variable codes">

<!-- Class 4.B.4.c -->
<!ELEMENT numeric_range  (minimum?,maximum?) >
<!ATTLIST numeric_range description CDATA #FIXED "Range for numeric values">
<!ELEMENT minimum (#PCDATA) >
<!ATTLIST minimum description CDATA #FIXED "Minimum value">
<!ELEMENT maximum (#PCDATA) >
<!ATTLIST maximum description CDATA #FIXED "Maximum value">

<!-- Class 4.B.4.d -->
<!ELEMENT missing_value_code  (#PCDATA) >
<!ATTLIST missing_value_code description CDATA #FIXED "Character used to represent missing data">

<!-- Class 4.B.4.e -->
<!ELEMENT precision   (#PCDATA) >
<!ATTLIST precision description CDATA #FIXED "Precision; number of significant digits">

<!-- Class 4.B.5 -->
<!ELEMENT field_format (variable_width|fixed_width)>
<!ATTLIST field_format description CDATA #FIXED "Data format">

<!--
Data sets are generally classified as fixed_width format or
variable_width format, but we have determined that this is actually a
per-field classification because one may encounter fixed_width fields
mixed together in the same data file with variable_width fields.

In our encoding scheme, the start of each field is assumed to be the
column after the last column of the previous field, or the first column
if this is the first field in the dataset.  The end column for each
field is classified using a field_format and some information specific to
each field_format type that indicates in which column the field ends. The
two types of field formats are variable_width and fixed_width. 
Variable_width fields can vary in their field length, and the end of the
field is delimited by a special character called a field delimiter,
usually a comma or a tab character.  Fixed_width fields have a set
length, and so the end of the field can always be determined by adding
the field_width to the starting column number.  Here is an example:

Assume we have the following data in a data set:

May,100aaa,1.2,
April,200aaa,3.4,
June,300bbb,4.6,

The metadata for the 4 fields would include the following:
<variable><name>month</name>
<field_format><variable_width><delimiter>,</delimiter>
</variable_width></field_format></variable>

<variable><name>sitecode</name>
<field_format><fixed_width><field_width>3</field_width>
</fixed_width></field_format></variable>

<variable><name>subsitecode</name>
<field_format><fixed_width><field_width>3</field_width>
</fixed_width></field_format></variable>

<variable><name>response</name>
<field_format><variable_width><delimiter>,</delimiter>
</variable_width></field_format></variable>

-->

<!ELEMENT variable_width (delimiter+)>
<!ATTLIST variable_width description CDATA #FIXED "Variable width field">
<!ELEMENT delimiter (#PCDATA)>
<!ATTLIST delimiter description CDATA #FIXED "Character used to delimit end of field"><!ELEMENT fixed_width (field_width)>
<!ATTLIST fixed_width description CDATA #FIXED "Fixed width field">
<!ELEMENT field_width (#PCDATA)>
<!ATTLIST field_width description CDATA #FIXED "Width of field in characters">

<!-- Class 4.B.5.a - see Class 4.B.5 -->

<!-- Class 4.B.5.b - see Class 4.B.5 -->

<!-- Class 4.B.5.c -->
<!-- This section was removed as we were unsure of its usefullness -->

<!-- End of file -->

